
GccTimerDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000280  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010a  0080010a  0000031e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000540  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000034f  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ae  00000000  00000000  00000c95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000261  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c1  00000000  00000000  000013d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001596  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	8a c0       	rjmp	.+276    	; 0x12c <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	53 c0       	rjmp	.+166    	; 0xc8 <__vector_16>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e0 e8       	ldi	r30, 0x80	; 128
  48:	f2 e0       	ldi	r31, 0x02	; 2
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	aa 30       	cpi	r26, 0x0A	; 10
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	aa e0       	ldi	r26, 0x0A	; 10
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a2 31       	cpi	r26, 0x12	; 18
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	09 c1       	rjmp	.+530    	; 0x27c <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
unsigned char gewei = 0;
unsigned int Cnt=0,Cnt2=0,num=0,num1;
int main(void)
{
	/* 595初始化 */
	hc595_init();
  6c:	b5 d0       	rcall	.+362    	; 0x1d8 <hc595_init>
	/* 数码管初始化 */
	display_init();
  6e:	8c d0       	rcall	.+280    	; 0x188 <display_init>
	/* 将定时器1比较输出连接的引脚配置成输出模式 */
	DDRB = (1<<PB1) | (1<<PB2); //pwm OC1A ,PB2-LED
  70:	86 e0       	ldi	r24, 0x06	; 6
  72:	84 b9       	out	0x04, r24	; 4
	/* 定时器0初始化 */
	timer0_init();
  74:	c9 d0       	rcall	.+402    	; 0x208 <timer0_init>
	/* 定时器1（pwm）初始化 */
	pwm1_init();
  76:	d5 d0       	rcall	.+426    	; 0x222 <pwm1_init>
	
	while(1)
	{
		shiwei = num/10;
  78:	40 91 0a 01 	lds	r20, 0x010A
  7c:	50 91 0b 01 	lds	r21, 0x010B
  80:	9a 01       	movw	r18, r20
  82:	ad ec       	ldi	r26, 0xCD	; 205
  84:	bc ec       	ldi	r27, 0xCC	; 204
  86:	ee d0       	rcall	.+476    	; 0x264 <__umulhisi3>
  88:	bc 01       	movw	r22, r24
  8a:	76 95       	lsr	r23
  8c:	67 95       	ror	r22
  8e:	76 95       	lsr	r23
  90:	67 95       	ror	r22
  92:	76 95       	lsr	r23
  94:	67 95       	ror	r22
  96:	60 93 11 01 	sts	0x0111, r22
		gewei  = num%10;
  9a:	9b 01       	movw	r18, r22
  9c:	22 0f       	add	r18, r18
  9e:	33 1f       	adc	r19, r19
  a0:	cb 01       	movw	r24, r22
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	82 0f       	add	r24, r18
  b0:	93 1f       	adc	r25, r19
  b2:	48 1b       	sub	r20, r24
  b4:	59 0b       	sbc	r21, r25
  b6:	40 93 10 01 	sts	0x0110, r20
		display_time(LED1,shiwei);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	6a d0       	rcall	.+212    	; 0x192 <display_time>
		display_time(LED2,gewei);
  be:	60 91 10 01 	lds	r22, 0x0110
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	66 d0       	rcall	.+204    	; 0x192 <display_time>
  c6:	d8 cf       	rjmp	.-80     	; 0x78 <main+0xc>

000000c8 <__vector_16>:
	}
}

/*******TIMER0中断服务程序（秒表功能）***********/
ISR(TIMER0_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	/* 每250ms进入中断 */
	TCNT0 = 6; //重装载计数值
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	86 bd       	out	0x26, r24	; 38
	Cnt++;
  da:	80 91 0e 01 	lds	r24, 0x010E
  de:	90 91 0f 01 	lds	r25, 0x010F
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	90 93 0f 01 	sts	0x010F, r25
  e8:	80 93 0e 01 	sts	0x010E, r24
	if(Cnt > 3)//num 每隔 250ms*4=1s 更新一次
  ec:	04 97       	sbiw	r24, 0x04	; 4
  ee:	68 f0       	brcs	.+26     	; 0x10a <__vector_16+0x42>
	{
		num++;
  f0:	80 91 0a 01 	lds	r24, 0x010A
  f4:	90 91 0b 01 	lds	r25, 0x010B
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 0b 01 	sts	0x010B, r25
  fe:	80 93 0a 01 	sts	0x010A, r24
		Cnt = 0;
 102:	10 92 0f 01 	sts	0x010F, r1
 106:	10 92 0e 01 	sts	0x010E, r1
	}
	if(num > 60 )
 10a:	80 91 0a 01 	lds	r24, 0x010A
 10e:	90 91 0b 01 	lds	r25, 0x010B
 112:	cd 97       	sbiw	r24, 0x3d	; 61
 114:	20 f0       	brcs	.+8      	; 0x11e <__vector_16+0x56>
	{
		num = 0;
 116:	10 92 0b 01 	sts	0x010B, r1
 11a:	10 92 0a 01 	sts	0x010A, r1
	}
}
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <__vector_11>:

/*******TIMER1中断服务程序（PWM功能）***********/
/* 1k，25%占空比相位修正PWM */
ISR(TIMER1_COMPA_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	2f 93       	push	r18
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
	OCR1A = 125; //重装载计数值
 13c:	8d e7       	ldi	r24, 0x7D	; 125
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	90 93 89 00 	sts	0x0089, r25
 144:	80 93 88 00 	sts	0x0088, r24
	ICR1  = 500;
 148:	84 ef       	ldi	r24, 0xF4	; 244
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	90 93 87 00 	sts	0x0087, r25
 150:	80 93 86 00 	sts	0x0086, r24
	Cnt2++;
 154:	80 91 0c 01 	lds	r24, 0x010C
 158:	90 91 0d 01 	lds	r25, 0x010D
 15c:	01 96       	adiw	r24, 0x01	; 1
	if(Cnt2 > 1000)
 15e:	89 3e       	cpi	r24, 0xE9	; 233
 160:	23 e0       	ldi	r18, 0x03	; 3
 162:	92 07       	cpc	r25, r18
 164:	28 f4       	brcc	.+10     	; 0x170 <__vector_11+0x44>
/* 1k，25%占空比相位修正PWM */
ISR(TIMER1_COMPA_vect)
{
	OCR1A = 125; //重装载计数值
	ICR1  = 500;
	Cnt2++;
 166:	90 93 0d 01 	sts	0x010D, r25
 16a:	80 93 0c 01 	sts	0x010C, r24
 16e:	04 c0       	rjmp	.+8      	; 0x178 <__vector_11+0x4c>
	if(Cnt2 > 1000)
	{
		Cnt2 = 0;
 170:	10 92 0d 01 	sts	0x010D, r1
 174:	10 92 0c 01 	sts	0x010C, r1
	}
	//PORTB ^= (1<<PB1);//PWM波形输出到端口
}
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <display_init>:
unsigned char dispcode1[]={0x40,0x79,0x24,0x30,0x19,0x12,0x02,0x78,0x00,0x10};//共阳带小数点
unsigned char dispcode2[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};//共阳无小数点
/* 在这里低电平选中，上电时候，先关闭数码管 */
void display_init(void)
{
		DDRD = (1<<PD4)|(1<<PD7); //输出口
 188:	80 e9       	ldi	r24, 0x90	; 144
 18a:	8a b9       	out	0x0a, r24	; 10
		SMG1_OFF();
 18c:	5c 9a       	sbi	0x0b, 4	; 11
		SMG2_ON();
 18e:	5f 98       	cbi	0x0b, 7	; 11
 190:	08 95       	ret

00000192 <display_time>:
}
//时间显示函数
void display_time(unsigned char Location,unsigned char num)
{
	switch(Location)
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	19 f0       	breq	.+6      	; 0x19c <display_time+0xa>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	81 f0       	breq	.+32     	; 0x1ba <display_time+0x28>
 19a:	08 95       	ret
	{
		case LED1:hc595out(dispcode2[num]);SMG1_ON();_delay_us(1000);SMG1_OFF();break;
 19c:	e6 2f       	mov	r30, r22
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	e0 50       	subi	r30, 0x00	; 0
 1a2:	ff 4f       	sbci	r31, 0xFF	; 255
 1a4:	80 81       	ld	r24, Z
 1a6:	2d d0       	rcall	.+90     	; 0x202 <hc595out>
 1a8:	5c 98       	cbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	89 ef       	ldi	r24, 0xF9	; 249
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <display_time+0x1c>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <display_time+0x22>
 1b4:	00 00       	nop
 1b6:	5c 9a       	sbi	0x0b, 4	; 11
 1b8:	08 95       	ret
		case LED2:hc595out(dispcode2[num]);SMG2_ON();_delay_us(1000);SMG2_OFF();break;
 1ba:	e6 2f       	mov	r30, r22
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	e0 50       	subi	r30, 0x00	; 0
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	80 81       	ld	r24, Z
 1c4:	1e d0       	rcall	.+60     	; 0x202 <hc595out>
 1c6:	5f 98       	cbi	0x0b, 7	; 11
 1c8:	89 ef       	ldi	r24, 0xF9	; 249
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <display_time+0x3a>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <display_time+0x40>
 1d2:	00 00       	nop
 1d4:	5f 9a       	sbi	0x0b, 7	; 11
 1d6:	08 95       	ret

000001d8 <hc595_init>:

/* 595 */
//595初始化
void hc595_init(void)
{
	DDRC = (1<<PC0) | (1<<PC4) | (1<<PC5); //输出口
 1d8:	81 e3       	ldi	r24, 0x31	; 49
 1da:	87 b9       	out	0x07, r24	; 7
	//hc595_ser = 1;
	hc595rck_set();
 1dc:	44 9a       	sbi	0x08, 4	; 8
	hc595clk_res();
 1de:	45 98       	cbi	0x08, 5	; 8
 1e0:	08 95       	ret

000001e2 <hc595_en>:
}

//锁存输出
void hc595_en(void)
{
	hc595rck_res();	//锁存低电平
 1e2:	44 98       	cbi	0x08, 4	; 8
	hc595rck_set();	//所存端产生上升沿跳变
 1e4:	44 9a       	sbi	0x08, 4	; 8
	hc595rck_res();	//为下一次做准备
 1e6:	44 98       	cbi	0x08, 4	; 8
 1e8:	08 95       	ret

000001ea <hc595outbyte>:
}

//串行输入一个字节
void hc595outbyte(unsigned char data)
{
 1ea:	98 e0       	ldi	r25, 0x08	; 8
	unsigned char i;//数据移位
	for(i=0;i<8;i++)//移位8次
	{
		if( data & 0x80 )//取出最高位，如果为1串行输入1，如果为0串行输入0
 1ec:	88 23       	and	r24, r24
 1ee:	14 f4       	brge	.+4      	; 0x1f4 <hc595outbyte+0xa>
		{
			hc595ser_set();
 1f0:	40 9a       	sbi	0x08, 0	; 8
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <hc595outbyte+0xc>
		}
		else
		{
			hc595ser_res();
 1f4:	40 98       	cbi	0x08, 0	; 8
		}
		data <<= 1;
 1f6:	88 0f       	add	r24, r24
		/* SCLK产生上升沿，移位寄存器中的数据整体后移，并接受新的数据(从ser/DS输入) */
		hc595clk_set();
 1f8:	45 9a       	sbi	0x08, 5	; 8
		hc595clk_res();
 1fa:	45 98       	cbi	0x08, 5	; 8
 1fc:	91 50       	subi	r25, 0x01	; 1

//串行输入一个字节
void hc595outbyte(unsigned char data)
{
	unsigned char i;//数据移位
	for(i=0;i<8;i++)//移位8次
 1fe:	b1 f7       	brne	.-20     	; 0x1ec <hc595outbyte+0x2>
		data <<= 1;
		/* SCLK产生上升沿，移位寄存器中的数据整体后移，并接受新的数据(从ser/DS输入) */
		hc595clk_set();
		hc595clk_res();
	}
}
 200:	08 95       	ret

00000202 <hc595out>:
//595输出数据
void hc595out(unsigned char data)
{
	hc595outbyte(data);//串行输入数据
 202:	f3 df       	rcall	.-26     	; 0x1ea <hc595outbyte>
	hc595_en();//数据锁存输出
 204:	ee df       	rcall	.-36     	; 0x1e2 <hc595_en>
 206:	08 95       	ret

00000208 <timer0_init>:
/* 系统频率1Mhz */

/* timer0--8位 */
void timer0_init(void)
{
	cli();												//关闭全局中断
 208:	f8 94       	cli
	TIMSK0 |= _BV(TOIE0);								//开溢出中断
 20a:	ee e6       	ldi	r30, 0x6E	; 110
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	81 60       	ori	r24, 0x01	; 1
 212:	80 83       	st	Z, r24
	TCCR0B |= ( _BV(CS02) | _BV(CS00) );				//1024分频 约1ms
 214:	85 b5       	in	r24, 0x25	; 37
 216:	85 60       	ori	r24, 0x05	; 5
 218:	85 bd       	out	0x25, r24	; 37
//	TCCR0A |= ( _BV(WGM02) | _BV(WGM01) | _BV(WGM00) );	//定时器普通模式
	TCNT0 = 6;											//初值6，250ms
 21a:	86 e0       	ldi	r24, 0x06	; 6
 21c:	86 bd       	out	0x26, r24	; 38
	sei();												//打开全局中断
 21e:	78 94       	sei
 220:	08 95       	ret

00000222 <pwm1_init>:
}

/* timer1--16位 */
void pwm1_init(void)
{
	cli();								//关闭全局中断
 222:	f8 94       	cli
	TCCR1B |= _BV(CS10);				//不分频  1M/2/500
 224:	e1 e8       	ldi	r30, 0x81	; 129
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM11) | (1<<COM1A1);	//相位修正PWM
 22e:	a0 e8       	ldi	r26, 0x80	; 128
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	8c 91       	ld	r24, X
 234:	82 68       	ori	r24, 0x82	; 130
 236:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM13);
 238:	80 81       	ld	r24, Z
 23a:	80 61       	ori	r24, 0x10	; 16
 23c:	80 83       	st	Z, r24
	TIMSK1 |= _BV(OCIE1A);				//A中断
 23e:	ef e6       	ldi	r30, 0x6F	; 111
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	82 60       	ori	r24, 0x02	; 2
 246:	80 83       	st	Z, r24
	/* 0-500升序时达到125清零，在500-0降序时达到125置位 */
	OCR1A  = 125;						//比较寄存器数值
 248:	8d e7       	ldi	r24, 0x7D	; 125
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	90 93 89 00 	sts	0x0089, r25
 250:	80 93 88 00 	sts	0x0088, r24
	ICR1   = 500;						
 254:	84 ef       	ldi	r24, 0xF4	; 244
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	90 93 87 00 	sts	0x0087, r25
 25c:	80 93 86 00 	sts	0x0086, r24
	sei();								//打开全局中断
 260:	78 94       	sei
 262:	08 95       	ret

00000264 <__umulhisi3>:
 264:	a2 9f       	mul	r26, r18
 266:	b0 01       	movw	r22, r0
 268:	b3 9f       	mul	r27, r19
 26a:	c0 01       	movw	r24, r0
 26c:	a3 9f       	mul	r26, r19
 26e:	01 d0       	rcall	.+2      	; 0x272 <__umulhisi3+0xe>
 270:	b2 9f       	mul	r27, r18
 272:	70 0d       	add	r23, r0
 274:	81 1d       	adc	r24, r1
 276:	11 24       	eor	r1, r1
 278:	91 1d       	adc	r25, r1
 27a:	08 95       	ret

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>

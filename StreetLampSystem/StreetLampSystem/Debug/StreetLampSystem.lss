
StreetLampSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a6  00800100  00000750  000007e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000750  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008002a6  008002a6  0000098a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000098a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  000009ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000979  00000000  00000000  00000b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000508  00000000  00000000  000014a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000683  00000000  00000000  000019ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e4  00000000  00000000  00002030  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000323  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000560  00000000  00000000  00002637  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00002b97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2f c1       	rjmp	.+606    	; 0x262 <__vector_1>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	7e c1       	rjmp	.+764    	; 0x314 <__vector_11>
  18:	97 c1       	rjmp	.+814    	; 0x348 <__vector_12>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	32 c1       	rjmp	.+612    	; 0x286 <__vector_16>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	de c1       	rjmp	.+956    	; 0x3e8 <__vector_21>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	12 e0       	ldi	r17, 0x02	; 2
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e0 e5       	ldi	r30, 0x50	; 80
  48:	f7 e0       	ldi	r31, 0x07	; 7
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a6 3a       	cpi	r26, 0xA6	; 166
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	22 e0       	ldi	r18, 0x02	; 2
  58:	a6 ea       	ldi	r26, 0xA6	; 166
  5a:	b2 e0       	ldi	r27, 0x02	; 2
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 3b       	cpi	r26, 0xB0	; 176
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	71 c3       	rjmp	.+1762   	; 0x74c <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
unsigned int Cnt=0,Cnt2=0,num=0;

int main(void)
{
	/* 端口初始化 */
	gpio_init();
  6c:	d0 d0       	rcall	.+416    	; 0x20e <gpio_init>
	/* 外部中断初始化 */
	keyint_init();
  6e:	f3 d1       	rcall	.+998    	; 0x456 <keyint_init>
	/* 数码管初始化 */
	display_init();
  70:	19 d0       	rcall	.+50     	; 0xa4 <display_init>
	/* 595初始化 */
	hc595_init();
  72:	db d0       	rcall	.+438    	; 0x22a <hc595_init>
	/* 定时器初始化 */
	timer0_init();
  74:	01 d2       	rcall	.+1026   	; 0x478 <timer0_init>
	pwm_init();
  76:	0d d2       	rcall	.+1050   	; 0x492 <pwm_init>
	spwm_init();
  78:	2d d2       	rcall	.+1114   	; 0x4d4 <spwm_init>
	/* adc初始化 */
	adc_init();
  7a:	09 d0       	rcall	.+18     	; 0x8e <adc_init>
	
	while(1)
	{
		/* led_task的一秒闪烁在timer0中断中实现 */
		/* 秒表和adc显示集成在display_task中 */
		display_task(num,temp);
  7c:	c6 ea       	ldi	r28, 0xA6	; 166
  7e:	d2 e0       	ldi	r29, 0x02	; 2
  80:	60 91 ae 02 	lds	r22, 0x02AE
  84:	70 91 af 02 	lds	r23, 0x02AF
  88:	88 81       	ld	r24, Y
  8a:	59 d0       	rcall	.+178    	; 0x13e <display_task>
  8c:	f9 cf       	rjmp	.-14     	; 0x80 <main+0x14>

0000008e <adc_init>:
#include "adc.h"

void adc_init(void)
{
	cli();
  8e:	f8 94       	cli
	ADCSRA =0;//关闭ADC
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX = 0X27;// 0010 0111 左对齐，参考电压AREF.通道7
  96:	87 e2       	ldi	r24, 0x27	; 39
  98:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(7);//使能adc和中断，预分频128，启动ADC,不设置连续转化模式
  9c:	8f ec       	ldi	r24, 0xCF	; 207
  9e:	80 83       	st	Z, r24
	sei();
  a0:	78 94       	sei
  a2:	08 95       	ret

000000a4 <display_init>:
unsigned char dispcode2[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};//共阳无小数点
/* 在这里低电平选中，上电时候，先关闭数码管 */
void display_init(void)
{
//		DDRD=(1<<PD5)|(1<<PD6)|(1<<PD7);    //输出口
	time_shi_off();
  a4:	5c 9a       	sbi	0x0b, 4	; 11
	time_ge_off();
  a6:	5f 9a       	sbi	0x0b, 7	; 11
	
	adc_bai_off();
  a8:	58 98       	cbi	0x0b, 0	; 11
	adc_shi_off();
  aa:	59 98       	cbi	0x0b, 1	; 11
	adc_ge_off();
  ac:	5e 98       	cbi	0x0b, 6	; 11
  ae:	08 95       	ret

000000b0 <display>:
}

//数码管显示函数
void display(unsigned char Location, unsigned char time, unsigned char adc)
{
	switch(Location)
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	c9 f0       	breq	.+50     	; 0xe6 <display+0x36>
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	69 f1       	breq	.+90     	; 0x112 <display+0x62>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	09 f0       	breq	.+2      	; 0xbe <display+0xe>
  bc:	3f c0       	rjmp	.+126    	; 0x13c <display+0x8c>
	{
		case bai:
				hc595out(dispcode2[time],dispcode1[adc]);
  be:	a4 2f       	mov	r26, r20
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	a6 5f       	subi	r26, 0xF6	; 246
  c4:	be 4f       	sbci	r27, 0xFE	; 254
  c6:	e6 2f       	mov	r30, r22
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	e0 50       	subi	r30, 0x00	; 0
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	6c 91       	ld	r22, X
  d0:	80 81       	ld	r24, Z
  d2:	be d0       	rcall	.+380    	; 0x250 <hc595out>
				adc_bai_on();
  d4:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	89 ef       	ldi	r24, 0xF9	; 249
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <display+0x2a>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <display+0x30>
  e0:	00 00       	nop
				_delay_us(1000);
				adc_bai_off();
  e2:	58 98       	cbi	0x0b, 0	; 11
				break;
  e4:	08 95       	ret
		case shi:
				hc595out(dispcode2[time],dispcode2[adc]);
  e6:	a4 2f       	mov	r26, r20
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	a0 50       	subi	r26, 0x00	; 0
  ec:	bf 4f       	sbci	r27, 0xFF	; 255
  ee:	e6 2f       	mov	r30, r22
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	e0 50       	subi	r30, 0x00	; 0
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	6c 91       	ld	r22, X
  f8:	80 81       	ld	r24, Z
  fa:	aa d0       	rcall	.+340    	; 0x250 <hc595out>
				adc_shi_on();time_shi_on();
  fc:	59 9a       	sbi	0x0b, 1	; 11
  fe:	5c 98       	cbi	0x0b, 4	; 11
 100:	89 ef       	ldi	r24, 0xF9	; 249
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <display+0x54>
 108:	00 c0       	rjmp	.+0      	; 0x10a <display+0x5a>
 10a:	00 00       	nop
				_delay_us(1000);
				adc_shi_off();time_shi_off();
 10c:	59 98       	cbi	0x0b, 1	; 11
 10e:	5c 9a       	sbi	0x0b, 4	; 11
				break;
 110:	08 95       	ret
		case ge :
				hc595out(dispcode2[time],dispcode2[adc]);
 112:	a4 2f       	mov	r26, r20
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	a0 50       	subi	r26, 0x00	; 0
 118:	bf 4f       	sbci	r27, 0xFF	; 255
 11a:	e6 2f       	mov	r30, r22
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	e0 50       	subi	r30, 0x00	; 0
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	6c 91       	ld	r22, X
 124:	80 81       	ld	r24, Z
 126:	94 d0       	rcall	.+296    	; 0x250 <hc595out>
				adc_ge_on();time_ge_on();
 128:	5e 9a       	sbi	0x0b, 6	; 11
 12a:	5f 98       	cbi	0x0b, 7	; 11
 12c:	89 ef       	ldi	r24, 0xF9	; 249
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <display+0x80>
 134:	00 c0       	rjmp	.+0      	; 0x136 <display+0x86>
 136:	00 00       	nop
				_delay_us(1000);
				adc_ge_off();time_ge_off();
 138:	5e 98       	cbi	0x0b, 6	; 11
 13a:	5f 9a       	sbi	0x0b, 7	; 11
 13c:	08 95       	ret

0000013e <display_task>:
	}
}

/* 数码管显示任务函数 */
void display_task(unsigned char time , unsigned int adc)
{
 13e:	cf 92       	push	r12
 140:	df 92       	push	r13
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	c8 2f       	mov	r28, r24
	adc *= 0.48875855;
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	ff d1       	rcall	.+1022   	; 0x552 <__floatunsisf>
 154:	20 e9       	ldi	r18, 0x90	; 144
 156:	3e e3       	ldi	r19, 0x3E	; 62
 158:	4a ef       	ldi	r20, 0xFA	; 250
 15a:	5e e3       	ldi	r21, 0x3E	; 62
 15c:	60 d2       	rcall	.+1216   	; 0x61e <__mulsf3>
 15e:	cd d1       	rcall	.+922    	; 0x4fa <__fixunssfsi>
 160:	6b 01       	movw	r12, r22
 162:	7c 01       	movw	r14, r24
	display(bai,1,adc/100);				//秒表未设百位，此处随便给值
 164:	9b 01       	movw	r18, r22
 166:	36 95       	lsr	r19
 168:	27 95       	ror	r18
 16a:	36 95       	lsr	r19
 16c:	27 95       	ror	r18
 16e:	ab e7       	ldi	r26, 0x7B	; 123
 170:	b4 e1       	ldi	r27, 0x14	; 20
 172:	e0 d2       	rcall	.+1472   	; 0x734 <__umulhisi3>
 174:	8c 01       	movw	r16, r24
 176:	16 95       	lsr	r17
 178:	07 95       	ror	r16
 17a:	40 2f       	mov	r20, r16
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	97 df       	rcall	.-210    	; 0xb0 <display>
	display(shi,time/10,(adc%100)/10);
 182:	24 e6       	ldi	r18, 0x64	; 100
 184:	20 9f       	mul	r18, r16
 186:	c0 01       	movw	r24, r0
 188:	21 9f       	mul	r18, r17
 18a:	90 0d       	add	r25, r0
 18c:	11 24       	eor	r1, r1
 18e:	96 01       	movw	r18, r12
 190:	28 1b       	sub	r18, r24
 192:	39 0b       	sbc	r19, r25
 194:	ad ec       	ldi	r26, 0xCD	; 205
 196:	bc ec       	ldi	r27, 0xCC	; 204
 198:	cd d2       	rcall	.+1434   	; 0x734 <__umulhisi3>
 19a:	ac 01       	movw	r20, r24
 19c:	56 95       	lsr	r21
 19e:	47 95       	ror	r20
 1a0:	56 95       	lsr	r21
 1a2:	47 95       	ror	r20
 1a4:	56 95       	lsr	r21
 1a6:	47 95       	ror	r20
 1a8:	1d ec       	ldi	r17, 0xCD	; 205
 1aa:	c1 9f       	mul	r28, r17
 1ac:	11 2d       	mov	r17, r1
 1ae:	11 24       	eor	r1, r1
 1b0:	16 95       	lsr	r17
 1b2:	16 95       	lsr	r17
 1b4:	16 95       	lsr	r17
 1b6:	61 2f       	mov	r22, r17
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	7a df       	rcall	.-268    	; 0xb0 <display>
	display(ge,time%10,adc%10);				
 1bc:	96 01       	movw	r18, r12
 1be:	ad ec       	ldi	r26, 0xCD	; 205
 1c0:	bc ec       	ldi	r27, 0xCC	; 204
 1c2:	b8 d2       	rcall	.+1392   	; 0x734 <__umulhisi3>
 1c4:	96 95       	lsr	r25
 1c6:	87 95       	ror	r24
 1c8:	96 95       	lsr	r25
 1ca:	87 95       	ror	r24
 1cc:	96 95       	lsr	r25
 1ce:	87 95       	ror	r24
 1d0:	9c 01       	movw	r18, r24
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	82 0f       	add	r24, r18
 1e4:	93 1f       	adc	r25, r19
 1e6:	a6 01       	movw	r20, r12
 1e8:	48 1b       	sub	r20, r24
 1ea:	59 0b       	sbc	r21, r25
 1ec:	11 0f       	add	r17, r17
 1ee:	81 2f       	mov	r24, r17
 1f0:	88 0f       	add	r24, r24
 1f2:	88 0f       	add	r24, r24
 1f4:	18 0f       	add	r17, r24
 1f6:	6c 2f       	mov	r22, r28
 1f8:	61 1b       	sub	r22, r17
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	59 df       	rcall	.-334    	; 0xb0 <display>
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	ff 90       	pop	r15
 206:	ef 90       	pop	r14
 208:	df 90       	pop	r13
 20a:	cf 90       	pop	r12
 20c:	08 95       	ret

0000020e <gpio_init>:
#include "gpio.h"
/* 端口初始化 */
void gpio_init(void)
{
	/* B端口 */
	DDRB = (1<<PB1) | (1<<PB2) | (1<<PB7); //PB1和PB2为两路PWM输出，PB7为1s闪烁LED输出口	
 20e:	86 e8       	ldi	r24, 0x86	; 134
 210:	84 b9       	out	0x04, r24	; 4
	/* C端口 */
	DDRC = (1<<PC0) | (1<<PC4) | (1<<PC5);//输出到595的 DS RCK CLK 的输出口
 212:	81 e3       	ldi	r24, 0x31	; 49
 214:	87 b9       	out	0x07, r24	; 7
	/* D端口 */
	DDRD = 0;//清零
 216:	1a b8       	out	0x0a, r1	; 10
	DDRD &= ~_BV(PD2);							// 按键输入
 218:	52 98       	cbi	0x0a, 2	; 10
	DDRD |= (1<<PD5);							// 通过中断实现LED闪烁的输出
 21a:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1<<PD4)|(1<<PD7);					// time显示数码管端口
 21c:	8a b1       	in	r24, 0x0a	; 10
 21e:	80 69       	ori	r24, 0x90	; 144
 220:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<PD0) | (1<<PD1) | (1<<PD6);		//adc显示数码管端口
 222:	8a b1       	in	r24, 0x0a	; 10
 224:	83 64       	ori	r24, 0x43	; 67
 226:	8a b9       	out	0x0a, r24	; 10
 228:	08 95       	ret

0000022a <hc595_init>:
//595初始化
void hc595_init(void)
{
	//DDRC = (1<<PC0) | (1<<PC4) | (1<<PC5); //输出端口
	//hc595_ser = 1;
	hc595rck_set();
 22a:	44 9a       	sbi	0x08, 4	; 8
	hc595clk_res();
 22c:	45 98       	cbi	0x08, 5	; 8
 22e:	08 95       	ret

00000230 <hc595_en>:
}

//锁存输出
void hc595_en(void)
{
	hc595rck_res();	//锁存低电平
 230:	44 98       	cbi	0x08, 4	; 8
	hc595rck_set();	//所存端产生上升沿跳变
 232:	44 9a       	sbi	0x08, 4	; 8
	hc595rck_res();	//为下一次做准备
 234:	44 98       	cbi	0x08, 4	; 8
 236:	08 95       	ret

00000238 <hc595inbyte>:
}

//串行输入一个字节
void hc595inbyte(unsigned char data)
{
 238:	98 e0       	ldi	r25, 0x08	; 8
	unsigned char i;//数据移位
	for(i=0;i<8;i++)//移位8次
	{
		if( data & 0x80 )//取出最高位，如果为1串行输入1，如果为0串行输入0
 23a:	88 23       	and	r24, r24
 23c:	14 f4       	brge	.+4      	; 0x242 <hc595inbyte+0xa>
		{
			hc595ser_set();
 23e:	40 9a       	sbi	0x08, 0	; 8
 240:	01 c0       	rjmp	.+2      	; 0x244 <hc595inbyte+0xc>
		}
		else
		{
			hc595ser_res();
 242:	40 98       	cbi	0x08, 0	; 8
		}
		data <<= 1;
 244:	88 0f       	add	r24, r24
		/* SCLK产生上升沿，移位寄存器中的数据整体后移，并接受新的数据(从ser/DS输入) */
		hc595clk_set();
 246:	45 9a       	sbi	0x08, 5	; 8
		hc595clk_res();
 248:	45 98       	cbi	0x08, 5	; 8
 24a:	91 50       	subi	r25, 0x01	; 1

//串行输入一个字节
void hc595inbyte(unsigned char data)
{
	unsigned char i;//数据移位
	for(i=0;i<8;i++)//移位8次
 24c:	b1 f7       	brne	.-20     	; 0x23a <hc595inbyte+0x2>
		data <<= 1;
		/* SCLK产生上升沿，移位寄存器中的数据整体后移，并接受新的数据(从ser/DS输入) */
		hc595clk_set();
		hc595clk_res();
	}
}
 24e:	08 95       	ret

00000250 <hc595out>:
//595输出数据
void hc595out(unsigned char time, unsigned char adc)
{
 250:	cf 93       	push	r28
 252:	c8 2f       	mov	r28, r24
 254:	86 2f       	mov	r24, r22
	hc595inbyte(adc);
 256:	f0 df       	rcall	.-32     	; 0x238 <hc595inbyte>
	hc595inbyte(time);
 258:	8c 2f       	mov	r24, r28
 25a:	ee df       	rcall	.-36     	; 0x238 <hc595inbyte>
	hc595_en();//数据锁存输出
 25c:	e9 df       	rcall	.-46     	; 0x230 <hc595_en>
}
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <__vector_1>:
36,38,40,43,46,49,52,56,60,63,67,72,76,81,85,90,
95,101,106,112,117,123,129,135,141,147,154,160,167,173,180,187,
194,200,207,214,221,228,235,242};
/*******外部中断0中断服务程序***********/
ISR(INT0_vect)
{
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
	PORTD^=_BV(LED3);
 270:	9b b1       	in	r25, 0x0b	; 11
 272:	80 e2       	ldi	r24, 0x20	; 32
 274:	89 27       	eor	r24, r25
 276:	8b b9       	out	0x0b, r24	; 11
}
 278:	9f 91       	pop	r25
 27a:	8f 91       	pop	r24
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <__vector_16>:

/*******TIMER0中断服务程序（秒表功能）***********/
ISR(TIMER0_OVF_vect)
{
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	2f 93       	push	r18
 292:	3f 93       	push	r19
 294:	4f 93       	push	r20
 296:	5f 93       	push	r21
 298:	6f 93       	push	r22
 29a:	7f 93       	push	r23
 29c:	8f 93       	push	r24
 29e:	9f 93       	push	r25
 2a0:	af 93       	push	r26
 2a2:	bf 93       	push	r27
 2a4:	ef 93       	push	r30
 2a6:	ff 93       	push	r31
	/* 每250ms进入中断， */
	TCNT0 = 6; //重装载计数值
 2a8:	86 e0       	ldi	r24, 0x06	; 6
 2aa:	86 bd       	out	0x26, r24	; 38
	Cnt++;
 2ac:	80 91 aa 02 	lds	r24, 0x02AA
 2b0:	90 91 ab 02 	lds	r25, 0x02AB
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	90 93 ab 02 	sts	0x02AB, r25
 2ba:	80 93 aa 02 	sts	0x02AA, r24
	if(Cnt > 3)//num 每隔 250ms*4=1s 更新一次
 2be:	04 97       	sbiw	r24, 0x04	; 4
 2c0:	70 f0       	brcs	.+28     	; 0x2de <__vector_16+0x58>
	{
		led2_toggle();
 2c2:	d6 d0       	rcall	.+428    	; 0x470 <led2_toggle>
		num++;
 2c4:	80 91 a6 02 	lds	r24, 0x02A6
 2c8:	90 91 a7 02 	lds	r25, 0x02A7
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	90 93 a7 02 	sts	0x02A7, r25
 2d2:	80 93 a6 02 	sts	0x02A6, r24
		Cnt = 0;
 2d6:	10 92 ab 02 	sts	0x02AB, r1
 2da:	10 92 aa 02 	sts	0x02AA, r1
	}
	if(num > 60 )
 2de:	80 91 a6 02 	lds	r24, 0x02A6
 2e2:	90 91 a7 02 	lds	r25, 0x02A7
 2e6:	cd 97       	sbiw	r24, 0x3d	; 61
 2e8:	20 f0       	brcs	.+8      	; 0x2f2 <__vector_16+0x6c>
	{
		num = 0;
 2ea:	10 92 a7 02 	sts	0x02A7, r1
 2ee:	10 92 a6 02 	sts	0x02A6, r1
	}
}
 2f2:	ff 91       	pop	r31
 2f4:	ef 91       	pop	r30
 2f6:	bf 91       	pop	r27
 2f8:	af 91       	pop	r26
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	7f 91       	pop	r23
 300:	6f 91       	pop	r22
 302:	5f 91       	pop	r21
 304:	4f 91       	pop	r20
 306:	3f 91       	pop	r19
 308:	2f 91       	pop	r18
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <__vector_11>:

/*******TIMER1中断服务程序（PWM功能）***********/
/* 1k，25%占空比相位修正PWM */
ISR(TIMER1_COMPA_vect)
{
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	8f 93       	push	r24
 320:	9f 93       	push	r25
	OCR1A = 125; //重装载计数值
 322:	8d e7       	ldi	r24, 0x7D	; 125
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	90 93 89 00 	sts	0x0089, r25
 32a:	80 93 88 00 	sts	0x0088, r24
	ICR1  = 500;
 32e:	84 ef       	ldi	r24, 0xF4	; 244
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	90 93 87 00 	sts	0x0087, r25
 336:	80 93 86 00 	sts	0x0086, r24
	//PORTB ^= (1<<PB1);//PWM波形输出到端口
}
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <__vector_12>:

/* SPWM,由PWM的频率1k可知，SPWM的频率为 1K/N ，N为一周期的点数，这里取200 调制度0.9*/
ISR(TIMER1_COMPB_vect)
{
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0
 350:	11 24       	eor	r1, r1
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31
	ICR1  = 500;
 35a:	84 ef       	ldi	r24, 0xF4	; 244
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	90 93 87 00 	sts	0x0087, r25
 362:	80 93 86 00 	sts	0x0086, r24
	OCR1B = table[Cnt2]; 
 366:	e0 91 a8 02 	lds	r30, 0x02A8
 36a:	f0 91 a9 02 	lds	r31, 0x02A9
 36e:	ee 0f       	add	r30, r30
 370:	ff 1f       	adc	r31, r31
 372:	ec 5e       	subi	r30, 0xEC	; 236
 374:	fe 4f       	sbci	r31, 0xFE	; 254
 376:	80 81       	ld	r24, Z
 378:	91 81       	ldd	r25, Z+1	; 0x01
 37a:	90 93 8b 00 	sts	0x008B, r25
 37e:	80 93 8a 00 	sts	0x008A, r24
	if( j%2 == 0)
 382:	80 91 a4 02 	lds	r24, 0x02A4
 386:	80 fd       	sbrc	r24, 0
 388:	14 c0       	rjmp	.+40     	; 0x3b2 <__vector_12+0x6a>
	{
		Cnt2++;
 38a:	80 91 a8 02 	lds	r24, 0x02A8
 38e:	90 91 a9 02 	lds	r25, 0x02A9
 392:	01 96       	adiw	r24, 0x01	; 1
 394:	90 93 a9 02 	sts	0x02A9, r25
 398:	80 93 a8 02 	sts	0x02A8, r24
		OCR1B = table[Cnt2]; //重装载计数值
 39c:	fc 01       	movw	r30, r24
 39e:	ee 0f       	add	r30, r30
 3a0:	ff 1f       	adc	r31, r31
 3a2:	ec 5e       	subi	r30, 0xEC	; 236
 3a4:	fe 4f       	sbci	r31, 0xFE	; 254
 3a6:	80 81       	ld	r24, Z
 3a8:	91 81       	ldd	r25, Z+1	; 0x01
 3aa:	90 93 8b 00 	sts	0x008B, r25
 3ae:	80 93 8a 00 	sts	0x008A, r24
	}
	if( Cnt2 >= 200 )
 3b2:	80 91 a8 02 	lds	r24, 0x02A8
 3b6:	90 91 a9 02 	lds	r25, 0x02A9
 3ba:	88 3c       	cpi	r24, 0xC8	; 200
 3bc:	91 05       	cpc	r25, r1
 3be:	30 f0       	brcs	.+12     	; 0x3cc <__vector_12+0x84>
	{
		Cnt2 = 0;
 3c0:	10 92 a9 02 	sts	0x02A9, r1
 3c4:	10 92 a8 02 	sts	0x02A8, r1
		j = 0;
 3c8:	10 92 a4 02 	sts	0x02A4, r1
	}
	j++;
 3cc:	80 91 a4 02 	lds	r24, 0x02A4
 3d0:	8f 5f       	subi	r24, 0xFF	; 255
 3d2:	80 93 a4 02 	sts	0x02A4, r24
	//if(Cnt2 > 1000)
	//{
	//	Cnt2 = 0;
	//}
	//PORTB ^= (1<<PB2);//SPWM波形输出到端口
}
 3d6:	ff 91       	pop	r31
 3d8:	ef 91       	pop	r30
 3da:	9f 91       	pop	r25
 3dc:	8f 91       	pop	r24
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <__vector_21>:

/*******ADC中断服务程序***********/
ISR(ADC_vect)
{
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	2f 93       	push	r18
 3f4:	3f 93       	push	r19
 3f6:	8f 93       	push	r24
 3f8:	9f 93       	push	r25
 3fa:	ef 93       	push	r30
 3fc:	ff 93       	push	r31
	//delay_1ms(1);
	//temp=ADCH;//读取转化的数据
	temp = ADCL>>6;
 3fe:	80 91 78 00 	lds	r24, 0x0078
 402:	82 95       	swap	r24
 404:	86 95       	lsr	r24
 406:	86 95       	lsr	r24
 408:	83 70       	andi	r24, 0x03	; 3
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	90 93 af 02 	sts	0x02AF, r25
 410:	80 93 ae 02 	sts	0x02AE, r24
	temp2 = ADCH;
 414:	20 91 79 00 	lds	r18, 0x0079
 418:	30 e0       	ldi	r19, 0x00	; 0
	temp2 <<= 2;
 41a:	22 0f       	add	r18, r18
 41c:	33 1f       	adc	r19, r19
 41e:	22 0f       	add	r18, r18
 420:	33 1f       	adc	r19, r19
 422:	30 93 ad 02 	sts	0x02AD, r19
 426:	20 93 ac 02 	sts	0x02AC, r18
	temp += temp2;   //10bit
 42a:	82 0f       	add	r24, r18
 42c:	93 1f       	adc	r25, r19
 42e:	90 93 af 02 	sts	0x02AF, r25
 432:	80 93 ae 02 	sts	0x02AE, r24
	ADCSRA|=0X40;//重启ADC，设置ADCSRA的ADATA和连续转换模式时不用
 436:	ea e7       	ldi	r30, 0x7A	; 122
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	80 64       	ori	r24, 0x40	; 64
 43e:	80 83       	st	Z, r24
}
 440:	ff 91       	pop	r31
 442:	ef 91       	pop	r30
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	3f 91       	pop	r19
 44a:	2f 91       	pop	r18
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <keyint_init>:
		DDRD  = (PD2>>1)|(1<<PD5);  // Key,PD2输入,PD5输出
}

void keyint_init(void)
{
		cli();			//关闭全局中断
 456:	f8 94       	cli

		// INT0下降沿
		EICRA &= ~_BV(ISC00);	// 0 , 下降沿产生中断
 458:	e9 e6       	ldi	r30, 0x69	; 105
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	80 81       	ld	r24, Z
 45e:	8e 7f       	andi	r24, 0xFE	; 254
 460:	80 83       	st	Z, r24
		EICRA |= _BV(ISC01);	// 1
 462:	80 81       	ld	r24, Z
 464:	82 60       	ori	r24, 0x02	; 2
 466:	80 83       	st	Z, r24
		EIMSK |= _BV(INT0);		// 使能
 468:	e8 9a       	sbi	0x1d, 0	; 29
		EIFR  |= _BV(INTF0);	// 标志位
 46a:	e0 9a       	sbi	0x1c, 0	; 28
		
		sei();					//开启全局中断
 46c:	78 94       	sei
 46e:	08 95       	ret

00000470 <led2_toggle>:
	PORTB ^= _BV(LED4);
}

void led2_toggle(void)
{
	PORTB ^= _BV(LED2);
 470:	85 b1       	in	r24, 0x05	; 5
 472:	80 58       	subi	r24, 0x80	; 128
 474:	85 b9       	out	0x05, r24	; 5
 476:	08 95       	ret

00000478 <timer0_init>:
/* 系统频率1Mhz */

/* timer0--8位 */
void timer0_init(void)
{
	cli();												//关闭全局中断
 478:	f8 94       	cli
	TIMSK0 |= _BV(TOIE0);								//开溢出中断
 47a:	ee e6       	ldi	r30, 0x6E	; 110
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	81 60       	ori	r24, 0x01	; 1
 482:	80 83       	st	Z, r24
	TCCR0B |= ( _BV(CS02) | _BV(CS00) );				//1024分频 约1ms
 484:	85 b5       	in	r24, 0x25	; 37
 486:	85 60       	ori	r24, 0x05	; 5
 488:	85 bd       	out	0x25, r24	; 37
//	TCCR0A |= ( _BV(WGM02) | _BV(WGM01) | _BV(WGM00) );	//定时器普通模式
	TCNT0 = 6;											//初值6，250ms
 48a:	86 e0       	ldi	r24, 0x06	; 6
 48c:	86 bd       	out	0x26, r24	; 38
	sei();												//打开全局中断
 48e:	78 94       	sei
 490:	08 95       	ret

00000492 <pwm_init>:

/* timer1--16位 */
void pwm_init(void)
{
	/* A通道 */
	cli();								//关闭全局中断
 492:	f8 94       	cli
	TCCR1B |= _BV(CS10);				//不分频  1M/2/500
 494:	e1 e8       	ldi	r30, 0x81	; 129
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	81 60       	ori	r24, 0x01	; 1
 49c:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM11) | (1<<COM1A1);	//相位修正PWM
 49e:	a0 e8       	ldi	r26, 0x80	; 128
 4a0:	b0 e0       	ldi	r27, 0x00	; 0
 4a2:	8c 91       	ld	r24, X
 4a4:	82 68       	ori	r24, 0x82	; 130
 4a6:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM13);
 4a8:	80 81       	ld	r24, Z
 4aa:	80 61       	ori	r24, 0x10	; 16
 4ac:	80 83       	st	Z, r24
	TIMSK1 |= _BV(OCIE1A);				//A中断
 4ae:	ef e6       	ldi	r30, 0x6F	; 111
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	82 60       	ori	r24, 0x02	; 2
 4b6:	80 83       	st	Z, r24
	/* 0-500升序时达到125清零，在500-0降序时达到125置位 */
	OCR1A  = 125;						//比较寄存器数值
 4b8:	8d e7       	ldi	r24, 0x7D	; 125
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	90 93 89 00 	sts	0x0089, r25
 4c0:	80 93 88 00 	sts	0x0088, r24
	ICR1   = 500;						
 4c4:	84 ef       	ldi	r24, 0xF4	; 244
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	90 93 87 00 	sts	0x0087, r25
 4cc:	80 93 86 00 	sts	0x0086, r24
	sei();								//打开全局中断
 4d0:	78 94       	sei
 4d2:	08 95       	ret

000004d4 <spwm_init>:
}
/* spwm */
void spwm_init(void)
{
	/* B通道 */
	cli();								
 4d4:	f8 94       	cli
	TCCR1A |= (1<<COM1B1);				
 4d6:	e0 e8       	ldi	r30, 0x80	; 128
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	80 62       	ori	r24, 0x20	; 32
 4de:	80 83       	st	Z, r24
	TIMSK1 |= _BV(OCIE1B);				//B中断
 4e0:	ef e6       	ldi	r30, 0x6F	; 111
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	84 60       	ori	r24, 0x04	; 4
 4e8:	80 83       	st	Z, r24
	OCR1B  = 250;						//比较寄存器数值
 4ea:	8a ef       	ldi	r24, 0xFA	; 250
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	90 93 8b 00 	sts	0x008B, r25
 4f2:	80 93 8a 00 	sts	0x008A, r24
	//ICR1   = 500;
	sei();								
 4f6:	78 94       	sei
 4f8:	08 95       	ret

000004fa <__fixunssfsi>:
 4fa:	70 d0       	rcall	.+224    	; 0x5dc <__fp_splitA>
 4fc:	88 f0       	brcs	.+34     	; 0x520 <__stack+0x21>
 4fe:	9f 57       	subi	r25, 0x7F	; 127
 500:	90 f0       	brcs	.+36     	; 0x526 <__stack+0x27>
 502:	b9 2f       	mov	r27, r25
 504:	99 27       	eor	r25, r25
 506:	b7 51       	subi	r27, 0x17	; 23
 508:	a0 f0       	brcs	.+40     	; 0x532 <__stack+0x33>
 50a:	d1 f0       	breq	.+52     	; 0x540 <__stack+0x41>
 50c:	66 0f       	add	r22, r22
 50e:	77 1f       	adc	r23, r23
 510:	88 1f       	adc	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	1a f0       	brmi	.+6      	; 0x51c <__stack+0x1d>
 516:	ba 95       	dec	r27
 518:	c9 f7       	brne	.-14     	; 0x50c <__stack+0xd>
 51a:	12 c0       	rjmp	.+36     	; 0x540 <__stack+0x41>
 51c:	b1 30       	cpi	r27, 0x01	; 1
 51e:	81 f0       	breq	.+32     	; 0x540 <__stack+0x41>
 520:	77 d0       	rcall	.+238    	; 0x610 <__fp_zero>
 522:	b1 e0       	ldi	r27, 0x01	; 1
 524:	08 95       	ret
 526:	74 c0       	rjmp	.+232    	; 0x610 <__fp_zero>
 528:	67 2f       	mov	r22, r23
 52a:	78 2f       	mov	r23, r24
 52c:	88 27       	eor	r24, r24
 52e:	b8 5f       	subi	r27, 0xF8	; 248
 530:	39 f0       	breq	.+14     	; 0x540 <__stack+0x41>
 532:	b9 3f       	cpi	r27, 0xF9	; 249
 534:	cc f3       	brlt	.-14     	; 0x528 <__stack+0x29>
 536:	86 95       	lsr	r24
 538:	77 95       	ror	r23
 53a:	67 95       	ror	r22
 53c:	b3 95       	inc	r27
 53e:	d9 f7       	brne	.-10     	; 0x536 <__stack+0x37>
 540:	3e f4       	brtc	.+14     	; 0x550 <__stack+0x51>
 542:	90 95       	com	r25
 544:	80 95       	com	r24
 546:	70 95       	com	r23
 548:	61 95       	neg	r22
 54a:	7f 4f       	sbci	r23, 0xFF	; 255
 54c:	8f 4f       	sbci	r24, 0xFF	; 255
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	08 95       	ret

00000552 <__floatunsisf>:
 552:	e8 94       	clt
 554:	09 c0       	rjmp	.+18     	; 0x568 <__floatsisf+0x12>

00000556 <__floatsisf>:
 556:	97 fb       	bst	r25, 7
 558:	3e f4       	brtc	.+14     	; 0x568 <__floatsisf+0x12>
 55a:	90 95       	com	r25
 55c:	80 95       	com	r24
 55e:	70 95       	com	r23
 560:	61 95       	neg	r22
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	8f 4f       	sbci	r24, 0xFF	; 255
 566:	9f 4f       	sbci	r25, 0xFF	; 255
 568:	99 23       	and	r25, r25
 56a:	a9 f0       	breq	.+42     	; 0x596 <__floatsisf+0x40>
 56c:	f9 2f       	mov	r31, r25
 56e:	96 e9       	ldi	r25, 0x96	; 150
 570:	bb 27       	eor	r27, r27
 572:	93 95       	inc	r25
 574:	f6 95       	lsr	r31
 576:	87 95       	ror	r24
 578:	77 95       	ror	r23
 57a:	67 95       	ror	r22
 57c:	b7 95       	ror	r27
 57e:	f1 11       	cpse	r31, r1
 580:	f8 cf       	rjmp	.-16     	; 0x572 <__floatsisf+0x1c>
 582:	fa f4       	brpl	.+62     	; 0x5c2 <__floatsisf+0x6c>
 584:	bb 0f       	add	r27, r27
 586:	11 f4       	brne	.+4      	; 0x58c <__floatsisf+0x36>
 588:	60 ff       	sbrs	r22, 0
 58a:	1b c0       	rjmp	.+54     	; 0x5c2 <__floatsisf+0x6c>
 58c:	6f 5f       	subi	r22, 0xFF	; 255
 58e:	7f 4f       	sbci	r23, 0xFF	; 255
 590:	8f 4f       	sbci	r24, 0xFF	; 255
 592:	9f 4f       	sbci	r25, 0xFF	; 255
 594:	16 c0       	rjmp	.+44     	; 0x5c2 <__floatsisf+0x6c>
 596:	88 23       	and	r24, r24
 598:	11 f0       	breq	.+4      	; 0x59e <__floatsisf+0x48>
 59a:	96 e9       	ldi	r25, 0x96	; 150
 59c:	11 c0       	rjmp	.+34     	; 0x5c0 <__floatsisf+0x6a>
 59e:	77 23       	and	r23, r23
 5a0:	21 f0       	breq	.+8      	; 0x5aa <__floatsisf+0x54>
 5a2:	9e e8       	ldi	r25, 0x8E	; 142
 5a4:	87 2f       	mov	r24, r23
 5a6:	76 2f       	mov	r23, r22
 5a8:	05 c0       	rjmp	.+10     	; 0x5b4 <__floatsisf+0x5e>
 5aa:	66 23       	and	r22, r22
 5ac:	71 f0       	breq	.+28     	; 0x5ca <__floatsisf+0x74>
 5ae:	96 e8       	ldi	r25, 0x86	; 134
 5b0:	86 2f       	mov	r24, r22
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	60 e0       	ldi	r22, 0x00	; 0
 5b6:	2a f0       	brmi	.+10     	; 0x5c2 <__floatsisf+0x6c>
 5b8:	9a 95       	dec	r25
 5ba:	66 0f       	add	r22, r22
 5bc:	77 1f       	adc	r23, r23
 5be:	88 1f       	adc	r24, r24
 5c0:	da f7       	brpl	.-10     	; 0x5b8 <__floatsisf+0x62>
 5c2:	88 0f       	add	r24, r24
 5c4:	96 95       	lsr	r25
 5c6:	87 95       	ror	r24
 5c8:	97 f9       	bld	r25, 7
 5ca:	08 95       	ret

000005cc <__fp_split3>:
 5cc:	57 fd       	sbrc	r21, 7
 5ce:	90 58       	subi	r25, 0x80	; 128
 5d0:	44 0f       	add	r20, r20
 5d2:	55 1f       	adc	r21, r21
 5d4:	59 f0       	breq	.+22     	; 0x5ec <__fp_splitA+0x10>
 5d6:	5f 3f       	cpi	r21, 0xFF	; 255
 5d8:	71 f0       	breq	.+28     	; 0x5f6 <__fp_splitA+0x1a>
 5da:	47 95       	ror	r20

000005dc <__fp_splitA>:
 5dc:	88 0f       	add	r24, r24
 5de:	97 fb       	bst	r25, 7
 5e0:	99 1f       	adc	r25, r25
 5e2:	61 f0       	breq	.+24     	; 0x5fc <__fp_splitA+0x20>
 5e4:	9f 3f       	cpi	r25, 0xFF	; 255
 5e6:	79 f0       	breq	.+30     	; 0x606 <__fp_splitA+0x2a>
 5e8:	87 95       	ror	r24
 5ea:	08 95       	ret
 5ec:	12 16       	cp	r1, r18
 5ee:	13 06       	cpc	r1, r19
 5f0:	14 06       	cpc	r1, r20
 5f2:	55 1f       	adc	r21, r21
 5f4:	f2 cf       	rjmp	.-28     	; 0x5da <__fp_split3+0xe>
 5f6:	46 95       	lsr	r20
 5f8:	f1 df       	rcall	.-30     	; 0x5dc <__fp_splitA>
 5fa:	08 c0       	rjmp	.+16     	; 0x60c <__fp_splitA+0x30>
 5fc:	16 16       	cp	r1, r22
 5fe:	17 06       	cpc	r1, r23
 600:	18 06       	cpc	r1, r24
 602:	99 1f       	adc	r25, r25
 604:	f1 cf       	rjmp	.-30     	; 0x5e8 <__fp_splitA+0xc>
 606:	86 95       	lsr	r24
 608:	71 05       	cpc	r23, r1
 60a:	61 05       	cpc	r22, r1
 60c:	08 94       	sec
 60e:	08 95       	ret

00000610 <__fp_zero>:
 610:	e8 94       	clt

00000612 <__fp_szero>:
 612:	bb 27       	eor	r27, r27
 614:	66 27       	eor	r22, r22
 616:	77 27       	eor	r23, r23
 618:	cb 01       	movw	r24, r22
 61a:	97 f9       	bld	r25, 7
 61c:	08 95       	ret

0000061e <__mulsf3>:
 61e:	0b d0       	rcall	.+22     	; 0x636 <__mulsf3x>
 620:	78 c0       	rjmp	.+240    	; 0x712 <__fp_round>
 622:	69 d0       	rcall	.+210    	; 0x6f6 <__fp_pscA>
 624:	28 f0       	brcs	.+10     	; 0x630 <__mulsf3+0x12>
 626:	6e d0       	rcall	.+220    	; 0x704 <__fp_pscB>
 628:	18 f0       	brcs	.+6      	; 0x630 <__mulsf3+0x12>
 62a:	95 23       	and	r25, r21
 62c:	09 f0       	breq	.+2      	; 0x630 <__mulsf3+0x12>
 62e:	5a c0       	rjmp	.+180    	; 0x6e4 <__fp_inf>
 630:	5f c0       	rjmp	.+190    	; 0x6f0 <__fp_nan>
 632:	11 24       	eor	r1, r1
 634:	ee cf       	rjmp	.-36     	; 0x612 <__fp_szero>

00000636 <__mulsf3x>:
 636:	ca df       	rcall	.-108    	; 0x5cc <__fp_split3>
 638:	a0 f3       	brcs	.-24     	; 0x622 <__mulsf3+0x4>

0000063a <__mulsf3_pse>:
 63a:	95 9f       	mul	r25, r21
 63c:	d1 f3       	breq	.-12     	; 0x632 <__mulsf3+0x14>
 63e:	95 0f       	add	r25, r21
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	55 1f       	adc	r21, r21
 644:	62 9f       	mul	r22, r18
 646:	f0 01       	movw	r30, r0
 648:	72 9f       	mul	r23, r18
 64a:	bb 27       	eor	r27, r27
 64c:	f0 0d       	add	r31, r0
 64e:	b1 1d       	adc	r27, r1
 650:	63 9f       	mul	r22, r19
 652:	aa 27       	eor	r26, r26
 654:	f0 0d       	add	r31, r0
 656:	b1 1d       	adc	r27, r1
 658:	aa 1f       	adc	r26, r26
 65a:	64 9f       	mul	r22, r20
 65c:	66 27       	eor	r22, r22
 65e:	b0 0d       	add	r27, r0
 660:	a1 1d       	adc	r26, r1
 662:	66 1f       	adc	r22, r22
 664:	82 9f       	mul	r24, r18
 666:	22 27       	eor	r18, r18
 668:	b0 0d       	add	r27, r0
 66a:	a1 1d       	adc	r26, r1
 66c:	62 1f       	adc	r22, r18
 66e:	73 9f       	mul	r23, r19
 670:	b0 0d       	add	r27, r0
 672:	a1 1d       	adc	r26, r1
 674:	62 1f       	adc	r22, r18
 676:	83 9f       	mul	r24, r19
 678:	a0 0d       	add	r26, r0
 67a:	61 1d       	adc	r22, r1
 67c:	22 1f       	adc	r18, r18
 67e:	74 9f       	mul	r23, r20
 680:	33 27       	eor	r19, r19
 682:	a0 0d       	add	r26, r0
 684:	61 1d       	adc	r22, r1
 686:	23 1f       	adc	r18, r19
 688:	84 9f       	mul	r24, r20
 68a:	60 0d       	add	r22, r0
 68c:	21 1d       	adc	r18, r1
 68e:	82 2f       	mov	r24, r18
 690:	76 2f       	mov	r23, r22
 692:	6a 2f       	mov	r22, r26
 694:	11 24       	eor	r1, r1
 696:	9f 57       	subi	r25, 0x7F	; 127
 698:	50 40       	sbci	r21, 0x00	; 0
 69a:	8a f0       	brmi	.+34     	; 0x6be <__mulsf3_pse+0x84>
 69c:	e1 f0       	breq	.+56     	; 0x6d6 <__mulsf3_pse+0x9c>
 69e:	88 23       	and	r24, r24
 6a0:	4a f0       	brmi	.+18     	; 0x6b4 <__mulsf3_pse+0x7a>
 6a2:	ee 0f       	add	r30, r30
 6a4:	ff 1f       	adc	r31, r31
 6a6:	bb 1f       	adc	r27, r27
 6a8:	66 1f       	adc	r22, r22
 6aa:	77 1f       	adc	r23, r23
 6ac:	88 1f       	adc	r24, r24
 6ae:	91 50       	subi	r25, 0x01	; 1
 6b0:	50 40       	sbci	r21, 0x00	; 0
 6b2:	a9 f7       	brne	.-22     	; 0x69e <__mulsf3_pse+0x64>
 6b4:	9e 3f       	cpi	r25, 0xFE	; 254
 6b6:	51 05       	cpc	r21, r1
 6b8:	70 f0       	brcs	.+28     	; 0x6d6 <__mulsf3_pse+0x9c>
 6ba:	14 c0       	rjmp	.+40     	; 0x6e4 <__fp_inf>
 6bc:	aa cf       	rjmp	.-172    	; 0x612 <__fp_szero>
 6be:	5f 3f       	cpi	r21, 0xFF	; 255
 6c0:	ec f3       	brlt	.-6      	; 0x6bc <__mulsf3_pse+0x82>
 6c2:	98 3e       	cpi	r25, 0xE8	; 232
 6c4:	dc f3       	brlt	.-10     	; 0x6bc <__mulsf3_pse+0x82>
 6c6:	86 95       	lsr	r24
 6c8:	77 95       	ror	r23
 6ca:	67 95       	ror	r22
 6cc:	b7 95       	ror	r27
 6ce:	f7 95       	ror	r31
 6d0:	e7 95       	ror	r30
 6d2:	9f 5f       	subi	r25, 0xFF	; 255
 6d4:	c1 f7       	brne	.-16     	; 0x6c6 <__mulsf3_pse+0x8c>
 6d6:	fe 2b       	or	r31, r30
 6d8:	88 0f       	add	r24, r24
 6da:	91 1d       	adc	r25, r1
 6dc:	96 95       	lsr	r25
 6de:	87 95       	ror	r24
 6e0:	97 f9       	bld	r25, 7
 6e2:	08 95       	ret

000006e4 <__fp_inf>:
 6e4:	97 f9       	bld	r25, 7
 6e6:	9f 67       	ori	r25, 0x7F	; 127
 6e8:	80 e8       	ldi	r24, 0x80	; 128
 6ea:	70 e0       	ldi	r23, 0x00	; 0
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	08 95       	ret

000006f0 <__fp_nan>:
 6f0:	9f ef       	ldi	r25, 0xFF	; 255
 6f2:	80 ec       	ldi	r24, 0xC0	; 192
 6f4:	08 95       	ret

000006f6 <__fp_pscA>:
 6f6:	00 24       	eor	r0, r0
 6f8:	0a 94       	dec	r0
 6fa:	16 16       	cp	r1, r22
 6fc:	17 06       	cpc	r1, r23
 6fe:	18 06       	cpc	r1, r24
 700:	09 06       	cpc	r0, r25
 702:	08 95       	ret

00000704 <__fp_pscB>:
 704:	00 24       	eor	r0, r0
 706:	0a 94       	dec	r0
 708:	12 16       	cp	r1, r18
 70a:	13 06       	cpc	r1, r19
 70c:	14 06       	cpc	r1, r20
 70e:	05 06       	cpc	r0, r21
 710:	08 95       	ret

00000712 <__fp_round>:
 712:	09 2e       	mov	r0, r25
 714:	03 94       	inc	r0
 716:	00 0c       	add	r0, r0
 718:	11 f4       	brne	.+4      	; 0x71e <__fp_round+0xc>
 71a:	88 23       	and	r24, r24
 71c:	52 f0       	brmi	.+20     	; 0x732 <__fp_round+0x20>
 71e:	bb 0f       	add	r27, r27
 720:	40 f4       	brcc	.+16     	; 0x732 <__fp_round+0x20>
 722:	bf 2b       	or	r27, r31
 724:	11 f4       	brne	.+4      	; 0x72a <__fp_round+0x18>
 726:	60 ff       	sbrs	r22, 0
 728:	04 c0       	rjmp	.+8      	; 0x732 <__fp_round+0x20>
 72a:	6f 5f       	subi	r22, 0xFF	; 255
 72c:	7f 4f       	sbci	r23, 0xFF	; 255
 72e:	8f 4f       	sbci	r24, 0xFF	; 255
 730:	9f 4f       	sbci	r25, 0xFF	; 255
 732:	08 95       	ret

00000734 <__umulhisi3>:
 734:	a2 9f       	mul	r26, r18
 736:	b0 01       	movw	r22, r0
 738:	b3 9f       	mul	r27, r19
 73a:	c0 01       	movw	r24, r0
 73c:	a3 9f       	mul	r26, r19
 73e:	01 d0       	rcall	.+2      	; 0x742 <__umulhisi3+0xe>
 740:	b2 9f       	mul	r27, r18
 742:	70 0d       	add	r23, r0
 744:	81 1d       	adc	r24, r1
 746:	11 24       	eor	r1, r1
 748:	91 1d       	adc	r25, r1
 74a:	08 95       	ret

0000074c <_exit>:
 74c:	f8 94       	cli

0000074e <__stop_program>:
 74e:	ff cf       	rjmp	.-2      	; 0x74e <__stop_program>


StreetLampSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000006b8  0000074c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800114  00800114  00000760  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000901  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004d4  00000000  00000000  000011f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000657  00000000  00000000  000016c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002ac  00000000  00000000  00001d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000311  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000050a  00000000  00000000  000022d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  000027e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2e c1       	rjmp	.+604    	; 0x260 <__vector_1>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	7d c1       	rjmp	.+762    	; 0x312 <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	31 c1       	rjmp	.+610    	; 0x284 <__vector_16>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	a5 c1       	rjmp	.+842    	; 0x376 <__vector_21>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e8 eb       	ldi	r30, 0xB8	; 184
  48:	f6 e0       	ldi	r31, 0x06	; 6
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a4 31       	cpi	r26, 0x14	; 20
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a4 e1       	ldi	r26, 0x14	; 20
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ae 31       	cpi	r26, 0x1E	; 30
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	25 c3       	rjmp	.+1610   	; 0x6b4 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
unsigned int Cnt=0,Cnt2=0,num=0;

int main(void)
{
	/* 端口初始化 */
	gpio_init();
  6c:	cf d0       	rcall	.+414    	; 0x20c <gpio_init>
	/* 外部中断初始化 */
	keyint_init();
  6e:	ba d1       	rcall	.+884    	; 0x3e4 <keyint_init>
	/* 数码管初始化 */
	display_init();
  70:	18 d0       	rcall	.+48     	; 0xa2 <display_init>
	/* 595初始化 */
	hc595_init();
  72:	da d0       	rcall	.+436    	; 0x228 <hc595_init>
	/* 定时器初始化 */
	timer0_init();
  74:	c8 d1       	rcall	.+912    	; 0x406 <timer0_init>
	pwm1_init();
  76:	d4 d1       	rcall	.+936    	; 0x420 <pwm1_init>
	/* adc初始化 */
	adc_init();
  78:	09 d0       	rcall	.+18     	; 0x8c <adc_init>
	
	while(1)
	{
		/* led_task的一秒闪烁在timer0中断中实现 */
		/* 秒表和adc显示集成在display_task中 */
		display_task(num,temp);
  7a:	c4 e1       	ldi	r28, 0x14	; 20
  7c:	d1 e0       	ldi	r29, 0x01	; 1
  7e:	60 91 1c 01 	lds	r22, 0x011C
  82:	70 91 1d 01 	lds	r23, 0x011D
  86:	88 81       	ld	r24, Y
  88:	59 d0       	rcall	.+178    	; 0x13c <display_task>
  8a:	f9 cf       	rjmp	.-14     	; 0x7e <main+0x12>

0000008c <adc_init>:
#include "adc.h"

void adc_init(void)
{
	cli();
  8c:	f8 94       	cli
	ADCSRA =0;//关闭ADC
  8e:	ea e7       	ldi	r30, 0x7A	; 122
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	10 82       	st	Z, r1
	ADMUX = 0X27;// 0010 0111 左对齐，参考电压AREF.通道7
  94:	87 e2       	ldi	r24, 0x27	; 39
  96:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(7);//使能adc和中断，预分频128，启动ADC,不设置连续转化模式
  9a:	8f ec       	ldi	r24, 0xCF	; 207
  9c:	80 83       	st	Z, r24
	sei();
  9e:	78 94       	sei
  a0:	08 95       	ret

000000a2 <display_init>:
unsigned char dispcode2[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};//共阳无小数点
/* 在这里低电平选中，上电时候，先关闭数码管 */
void display_init(void)
{
//		DDRD=(1<<PD5)|(1<<PD6)|(1<<PD7);    //输出口
	time_shi_off();
  a2:	5c 9a       	sbi	0x0b, 4	; 11
	time_ge_off();
  a4:	5f 9a       	sbi	0x0b, 7	; 11
	
	adc_bai_off();
  a6:	58 98       	cbi	0x0b, 0	; 11
	adc_shi_off();
  a8:	59 98       	cbi	0x0b, 1	; 11
	adc_ge_off();
  aa:	5e 98       	cbi	0x0b, 6	; 11
  ac:	08 95       	ret

000000ae <display>:
}

//数码管显示函数
void display(unsigned char Location, unsigned char time, unsigned char adc)
{
	switch(Location)
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	c9 f0       	breq	.+50     	; 0xe4 <display+0x36>
  b2:	83 30       	cpi	r24, 0x03	; 3
  b4:	69 f1       	breq	.+90     	; 0x110 <display+0x62>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	09 f0       	breq	.+2      	; 0xbc <display+0xe>
  ba:	3f c0       	rjmp	.+126    	; 0x13a <display+0x8c>
	{
		case bai:
				hc595out(dispcode2[time],dispcode1[adc]);
  bc:	a4 2f       	mov	r26, r20
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	a6 5f       	subi	r26, 0xF6	; 246
  c2:	be 4f       	sbci	r27, 0xFE	; 254
  c4:	e6 2f       	mov	r30, r22
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	e0 50       	subi	r30, 0x00	; 0
  ca:	ff 4f       	sbci	r31, 0xFF	; 255
  cc:	6c 91       	ld	r22, X
  ce:	80 81       	ld	r24, Z
  d0:	be d0       	rcall	.+380    	; 0x24e <hc595out>
				adc_bai_on();
  d2:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	89 ef       	ldi	r24, 0xF9	; 249
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <display+0x2a>
  dc:	00 c0       	rjmp	.+0      	; 0xde <display+0x30>
  de:	00 00       	nop
				_delay_us(1000);
				adc_bai_off();
  e0:	58 98       	cbi	0x0b, 0	; 11
				break;
  e2:	08 95       	ret
		case shi:
				hc595out(dispcode2[time],dispcode2[adc]);
  e4:	a4 2f       	mov	r26, r20
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	a0 50       	subi	r26, 0x00	; 0
  ea:	bf 4f       	sbci	r27, 0xFF	; 255
  ec:	e6 2f       	mov	r30, r22
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	e0 50       	subi	r30, 0x00	; 0
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	6c 91       	ld	r22, X
  f6:	80 81       	ld	r24, Z
  f8:	aa d0       	rcall	.+340    	; 0x24e <hc595out>
				adc_shi_on();time_shi_on();
  fa:	59 9a       	sbi	0x0b, 1	; 11
  fc:	5c 98       	cbi	0x0b, 4	; 11
  fe:	89 ef       	ldi	r24, 0xF9	; 249
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <display+0x54>
 106:	00 c0       	rjmp	.+0      	; 0x108 <display+0x5a>
 108:	00 00       	nop
				_delay_us(1000);
				adc_shi_off();time_shi_off();
 10a:	59 98       	cbi	0x0b, 1	; 11
 10c:	5c 9a       	sbi	0x0b, 4	; 11
				break;
 10e:	08 95       	ret
		case ge :
				hc595out(dispcode2[time],dispcode2[adc]);
 110:	a4 2f       	mov	r26, r20
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	a0 50       	subi	r26, 0x00	; 0
 116:	bf 4f       	sbci	r27, 0xFF	; 255
 118:	e6 2f       	mov	r30, r22
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	e0 50       	subi	r30, 0x00	; 0
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	6c 91       	ld	r22, X
 122:	80 81       	ld	r24, Z
 124:	94 d0       	rcall	.+296    	; 0x24e <hc595out>
				adc_ge_on();time_ge_on();
 126:	5e 9a       	sbi	0x0b, 6	; 11
 128:	5f 98       	cbi	0x0b, 7	; 11
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <display+0x80>
 132:	00 c0       	rjmp	.+0      	; 0x134 <display+0x86>
 134:	00 00       	nop
				_delay_us(1000);
				adc_ge_off();time_ge_off();
 136:	5e 98       	cbi	0x0b, 6	; 11
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	08 95       	ret

0000013c <display_task>:
	}
}

/* 数码管显示任务函数 */
void display_task(unsigned char time , unsigned int adc)
{
 13c:	cf 92       	push	r12
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	c8 2f       	mov	r28, r24
	adc *= 0.48875855;
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	b4 d1       	rcall	.+872    	; 0x4ba <__floatunsisf>
 152:	20 e9       	ldi	r18, 0x90	; 144
 154:	3e e3       	ldi	r19, 0x3E	; 62
 156:	4a ef       	ldi	r20, 0xFA	; 250
 158:	5e e3       	ldi	r21, 0x3E	; 62
 15a:	15 d2       	rcall	.+1066   	; 0x586 <__mulsf3>
 15c:	82 d1       	rcall	.+772    	; 0x462 <__fixunssfsi>
 15e:	6b 01       	movw	r12, r22
 160:	7c 01       	movw	r14, r24
	display(bai,1,adc/100);				//秒表未设百位，此处随便给值
 162:	9b 01       	movw	r18, r22
 164:	36 95       	lsr	r19
 166:	27 95       	ror	r18
 168:	36 95       	lsr	r19
 16a:	27 95       	ror	r18
 16c:	ab e7       	ldi	r26, 0x7B	; 123
 16e:	b4 e1       	ldi	r27, 0x14	; 20
 170:	95 d2       	rcall	.+1322   	; 0x69c <__umulhisi3>
 172:	8c 01       	movw	r16, r24
 174:	16 95       	lsr	r17
 176:	07 95       	ror	r16
 178:	40 2f       	mov	r20, r16
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	97 df       	rcall	.-210    	; 0xae <display>
	display(shi,time/10,(adc%100)/10);
 180:	24 e6       	ldi	r18, 0x64	; 100
 182:	20 9f       	mul	r18, r16
 184:	c0 01       	movw	r24, r0
 186:	21 9f       	mul	r18, r17
 188:	90 0d       	add	r25, r0
 18a:	11 24       	eor	r1, r1
 18c:	96 01       	movw	r18, r12
 18e:	28 1b       	sub	r18, r24
 190:	39 0b       	sbc	r19, r25
 192:	ad ec       	ldi	r26, 0xCD	; 205
 194:	bc ec       	ldi	r27, 0xCC	; 204
 196:	82 d2       	rcall	.+1284   	; 0x69c <__umulhisi3>
 198:	ac 01       	movw	r20, r24
 19a:	56 95       	lsr	r21
 19c:	47 95       	ror	r20
 19e:	56 95       	lsr	r21
 1a0:	47 95       	ror	r20
 1a2:	56 95       	lsr	r21
 1a4:	47 95       	ror	r20
 1a6:	1d ec       	ldi	r17, 0xCD	; 205
 1a8:	c1 9f       	mul	r28, r17
 1aa:	11 2d       	mov	r17, r1
 1ac:	11 24       	eor	r1, r1
 1ae:	16 95       	lsr	r17
 1b0:	16 95       	lsr	r17
 1b2:	16 95       	lsr	r17
 1b4:	61 2f       	mov	r22, r17
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	7a df       	rcall	.-268    	; 0xae <display>
	display(ge,time%10,adc%10);				
 1ba:	96 01       	movw	r18, r12
 1bc:	ad ec       	ldi	r26, 0xCD	; 205
 1be:	bc ec       	ldi	r27, 0xCC	; 204
 1c0:	6d d2       	rcall	.+1242   	; 0x69c <__umulhisi3>
 1c2:	96 95       	lsr	r25
 1c4:	87 95       	ror	r24
 1c6:	96 95       	lsr	r25
 1c8:	87 95       	ror	r24
 1ca:	96 95       	lsr	r25
 1cc:	87 95       	ror	r24
 1ce:	9c 01       	movw	r18, r24
 1d0:	22 0f       	add	r18, r18
 1d2:	33 1f       	adc	r19, r19
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	82 0f       	add	r24, r18
 1e2:	93 1f       	adc	r25, r19
 1e4:	a6 01       	movw	r20, r12
 1e6:	48 1b       	sub	r20, r24
 1e8:	59 0b       	sbc	r21, r25
 1ea:	11 0f       	add	r17, r17
 1ec:	81 2f       	mov	r24, r17
 1ee:	88 0f       	add	r24, r24
 1f0:	88 0f       	add	r24, r24
 1f2:	18 0f       	add	r17, r24
 1f4:	6c 2f       	mov	r22, r28
 1f6:	61 1b       	sub	r22, r17
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	59 df       	rcall	.-334    	; 0xae <display>
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	ff 90       	pop	r15
 204:	ef 90       	pop	r14
 206:	df 90       	pop	r13
 208:	cf 90       	pop	r12
 20a:	08 95       	ret

0000020c <gpio_init>:
#include "gpio.h"
/* 端口初始化 */
void gpio_init(void)
{
	/* B端口 */
	DDRB = (1<<PB1) | (1<<PB2) | (1<<PB7); //PB1和PB2为两路PWM输出，PB7为1s闪烁LED输出口	
 20c:	86 e8       	ldi	r24, 0x86	; 134
 20e:	84 b9       	out	0x04, r24	; 4
	/* C端口 */
	DDRC = (1<<PC0) | (1<<PC4) | (1<<PC5);//输出到595的 DS RCK CLK 的输出口
 210:	81 e3       	ldi	r24, 0x31	; 49
 212:	87 b9       	out	0x07, r24	; 7
	/* D端口 */
	DDRD = 0;//清零
 214:	1a b8       	out	0x0a, r1	; 10
	DDRD &= ~_BV(PD2);							// 按键输入
 216:	52 98       	cbi	0x0a, 2	; 10
	DDRD |= (1<<PD5);							// 通过中断实现LED闪烁的输出
 218:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1<<PD4)|(1<<PD7);					// time显示数码管端口
 21a:	8a b1       	in	r24, 0x0a	; 10
 21c:	80 69       	ori	r24, 0x90	; 144
 21e:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<PD0) | (1<<PD1) | (1<<PD6);		//adc显示数码管端口
 220:	8a b1       	in	r24, 0x0a	; 10
 222:	83 64       	ori	r24, 0x43	; 67
 224:	8a b9       	out	0x0a, r24	; 10
 226:	08 95       	ret

00000228 <hc595_init>:
//595初始化
void hc595_init(void)
{
	//DDRC = (1<<PC0) | (1<<PC4) | (1<<PC5); //输出端口
	//hc595_ser = 1;
	hc595rck_set();
 228:	44 9a       	sbi	0x08, 4	; 8
	hc595clk_res();
 22a:	45 98       	cbi	0x08, 5	; 8
 22c:	08 95       	ret

0000022e <hc595_en>:
}

//锁存输出
void hc595_en(void)
{
	hc595rck_res();	//锁存低电平
 22e:	44 98       	cbi	0x08, 4	; 8
	hc595rck_set();	//所存端产生上升沿跳变
 230:	44 9a       	sbi	0x08, 4	; 8
	hc595rck_res();	//为下一次做准备
 232:	44 98       	cbi	0x08, 4	; 8
 234:	08 95       	ret

00000236 <hc595inbyte>:
}

//串行输入一个字节
void hc595inbyte(unsigned char data)
{
 236:	98 e0       	ldi	r25, 0x08	; 8
	unsigned char i;//数据移位
	for(i=0;i<8;i++)//移位8次
	{
		if( data & 0x80 )//取出最高位，如果为1串行输入1，如果为0串行输入0
 238:	88 23       	and	r24, r24
 23a:	14 f4       	brge	.+4      	; 0x240 <hc595inbyte+0xa>
		{
			hc595ser_set();
 23c:	40 9a       	sbi	0x08, 0	; 8
 23e:	01 c0       	rjmp	.+2      	; 0x242 <hc595inbyte+0xc>
		}
		else
		{
			hc595ser_res();
 240:	40 98       	cbi	0x08, 0	; 8
		}
		data <<= 1;
 242:	88 0f       	add	r24, r24
		/* SCLK产生上升沿，移位寄存器中的数据整体后移，并接受新的数据(从ser/DS输入) */
		hc595clk_set();
 244:	45 9a       	sbi	0x08, 5	; 8
		hc595clk_res();
 246:	45 98       	cbi	0x08, 5	; 8
 248:	91 50       	subi	r25, 0x01	; 1

//串行输入一个字节
void hc595inbyte(unsigned char data)
{
	unsigned char i;//数据移位
	for(i=0;i<8;i++)//移位8次
 24a:	b1 f7       	brne	.-20     	; 0x238 <hc595inbyte+0x2>
		data <<= 1;
		/* SCLK产生上升沿，移位寄存器中的数据整体后移，并接受新的数据(从ser/DS输入) */
		hc595clk_set();
		hc595clk_res();
	}
}
 24c:	08 95       	ret

0000024e <hc595out>:
//595输出数据
void hc595out(unsigned char time, unsigned char adc)
{
 24e:	cf 93       	push	r28
 250:	c8 2f       	mov	r28, r24
 252:	86 2f       	mov	r24, r22
	hc595inbyte(adc);
 254:	f0 df       	rcall	.-32     	; 0x236 <hc595inbyte>
	hc595inbyte(time);
 256:	8c 2f       	mov	r24, r28
 258:	ee df       	rcall	.-36     	; 0x236 <hc595inbyte>
	hc595_en();//数据锁存输出
 25a:	e9 df       	rcall	.-46     	; 0x22e <hc595_en>
}
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <__vector_1>:
/* 中断服务程序 */
#include "interrupt.h"
/*******外部中断0中断服务程序***********/
ISR(INT0_vect)
{
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
	PORTD^=_BV(LED3);
 26e:	9b b1       	in	r25, 0x0b	; 11
 270:	80 e2       	ldi	r24, 0x20	; 32
 272:	89 27       	eor	r24, r25
 274:	8b b9       	out	0x0b, r24	; 11
}
 276:	9f 91       	pop	r25
 278:	8f 91       	pop	r24
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <__vector_16>:

/*******TIMER0中断服务程序（秒表功能）***********/
ISR(TIMER0_OVF_vect)
{
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	2f 93       	push	r18
 290:	3f 93       	push	r19
 292:	4f 93       	push	r20
 294:	5f 93       	push	r21
 296:	6f 93       	push	r22
 298:	7f 93       	push	r23
 29a:	8f 93       	push	r24
 29c:	9f 93       	push	r25
 29e:	af 93       	push	r26
 2a0:	bf 93       	push	r27
 2a2:	ef 93       	push	r30
 2a4:	ff 93       	push	r31
	/* 每250ms进入中断 */
	TCNT0 = 6; //重装载计数值
 2a6:	86 e0       	ldi	r24, 0x06	; 6
 2a8:	86 bd       	out	0x26, r24	; 38
	Cnt++;
 2aa:	80 91 18 01 	lds	r24, 0x0118
 2ae:	90 91 19 01 	lds	r25, 0x0119
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	90 93 19 01 	sts	0x0119, r25
 2b8:	80 93 18 01 	sts	0x0118, r24
	if(Cnt > 3)//num 每隔 250ms*4=1s 更新一次
 2bc:	04 97       	sbiw	r24, 0x04	; 4
 2be:	70 f0       	brcs	.+28     	; 0x2dc <__vector_16+0x58>
	{
		led2_toggle();
 2c0:	9e d0       	rcall	.+316    	; 0x3fe <led2_toggle>
		num++;
 2c2:	80 91 14 01 	lds	r24, 0x0114
 2c6:	90 91 15 01 	lds	r25, 0x0115
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	90 93 15 01 	sts	0x0115, r25
 2d0:	80 93 14 01 	sts	0x0114, r24
		Cnt = 0;
 2d4:	10 92 19 01 	sts	0x0119, r1
 2d8:	10 92 18 01 	sts	0x0118, r1
	}
	if(num > 60 )
 2dc:	80 91 14 01 	lds	r24, 0x0114
 2e0:	90 91 15 01 	lds	r25, 0x0115
 2e4:	cd 97       	sbiw	r24, 0x3d	; 61
 2e6:	20 f0       	brcs	.+8      	; 0x2f0 <__vector_16+0x6c>
	{
		num = 0;
 2e8:	10 92 15 01 	sts	0x0115, r1
 2ec:	10 92 14 01 	sts	0x0114, r1
	}
}
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	bf 91       	pop	r27
 2f6:	af 91       	pop	r26
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	7f 91       	pop	r23
 2fe:	6f 91       	pop	r22
 300:	5f 91       	pop	r21
 302:	4f 91       	pop	r20
 304:	3f 91       	pop	r19
 306:	2f 91       	pop	r18
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <__vector_11>:

/*******TIMER1中断服务程序（PWM功能）***********/
/* 1k，25%占空比相位修正PWM */
ISR(TIMER1_COMPA_vect)
{
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	2f 93       	push	r18
 31e:	8f 93       	push	r24
 320:	9f 93       	push	r25
	OCR1A = 125; //重装载计数值
 322:	8d e7       	ldi	r24, 0x7D	; 125
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	90 93 89 00 	sts	0x0089, r25
 32a:	80 93 88 00 	sts	0x0088, r24
	ICR1  = 500;
 32e:	84 ef       	ldi	r24, 0xF4	; 244
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	90 93 87 00 	sts	0x0087, r25
 336:	80 93 86 00 	sts	0x0086, r24
	Cnt2++;
 33a:	80 91 16 01 	lds	r24, 0x0116
 33e:	90 91 17 01 	lds	r25, 0x0117
 342:	01 96       	adiw	r24, 0x01	; 1
	if(Cnt2 > 1000)
 344:	89 3e       	cpi	r24, 0xE9	; 233
 346:	23 e0       	ldi	r18, 0x03	; 3
 348:	92 07       	cpc	r25, r18
 34a:	28 f4       	brcc	.+10     	; 0x356 <__vector_11+0x44>
/* 1k，25%占空比相位修正PWM */
ISR(TIMER1_COMPA_vect)
{
	OCR1A = 125; //重装载计数值
	ICR1  = 500;
	Cnt2++;
 34c:	90 93 17 01 	sts	0x0117, r25
 350:	80 93 16 01 	sts	0x0116, r24
 354:	04 c0       	rjmp	.+8      	; 0x35e <__vector_11+0x4c>
	if(Cnt2 > 1000)
	{
		Cnt2 = 0;
 356:	10 92 17 01 	sts	0x0117, r1
 35a:	10 92 16 01 	sts	0x0116, r1
	}
	PORTB ^= (1<<PB1);//PWM波形输出到端口
 35e:	95 b1       	in	r25, 0x05	; 5
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	89 27       	eor	r24, r25
 364:	85 b9       	out	0x05, r24	; 5
}
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <__vector_21>:

/*******ADC中断服务程序***********/
ISR(ADC_vect)
{
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	2f 93       	push	r18
 382:	3f 93       	push	r19
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	ef 93       	push	r30
 38a:	ff 93       	push	r31
	//delay_1ms(1);
	//temp=ADCH;//读取转化的数据
	temp = ADCL>>6;
 38c:	80 91 78 00 	lds	r24, 0x0078
 390:	82 95       	swap	r24
 392:	86 95       	lsr	r24
 394:	86 95       	lsr	r24
 396:	83 70       	andi	r24, 0x03	; 3
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	90 93 1d 01 	sts	0x011D, r25
 39e:	80 93 1c 01 	sts	0x011C, r24
	temp2 = ADCH;
 3a2:	20 91 79 00 	lds	r18, 0x0079
 3a6:	30 e0       	ldi	r19, 0x00	; 0
	temp2 <<= 2;
 3a8:	22 0f       	add	r18, r18
 3aa:	33 1f       	adc	r19, r19
 3ac:	22 0f       	add	r18, r18
 3ae:	33 1f       	adc	r19, r19
 3b0:	30 93 1b 01 	sts	0x011B, r19
 3b4:	20 93 1a 01 	sts	0x011A, r18
	temp += temp2;   //10bit
 3b8:	82 0f       	add	r24, r18
 3ba:	93 1f       	adc	r25, r19
 3bc:	90 93 1d 01 	sts	0x011D, r25
 3c0:	80 93 1c 01 	sts	0x011C, r24
	ADCSRA|=0X40;//重启ADC，设置ADCSRA的ADATA和连续转换模式时不用
 3c4:	ea e7       	ldi	r30, 0x7A	; 122
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	80 64       	ori	r24, 0x40	; 64
 3cc:	80 83       	st	Z, r24
}
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	9f 91       	pop	r25
 3d4:	8f 91       	pop	r24
 3d6:	3f 91       	pop	r19
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <keyint_init>:
		DDRD  = (PD2>>1)|(1<<PD5);  // Key,PD2输入,PD5输出
}

void keyint_init(void)
{
		cli();			//关闭全局中断
 3e4:	f8 94       	cli

		// INT0下降沿
		EICRA &= ~_BV(ISC00);	// 0 , 下降沿产生中断
 3e6:	e9 e6       	ldi	r30, 0x69	; 105
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	8e 7f       	andi	r24, 0xFE	; 254
 3ee:	80 83       	st	Z, r24
		EICRA |= _BV(ISC01);	// 1
 3f0:	80 81       	ld	r24, Z
 3f2:	82 60       	ori	r24, 0x02	; 2
 3f4:	80 83       	st	Z, r24
		EIMSK |= _BV(INT0);		// 使能
 3f6:	e8 9a       	sbi	0x1d, 0	; 29
		EIFR  |= _BV(INTF0);	// 标志位
 3f8:	e0 9a       	sbi	0x1c, 0	; 28
		
		sei();					//开启全局中断
 3fa:	78 94       	sei
 3fc:	08 95       	ret

000003fe <led2_toggle>:
	PORTB ^= _BV(LED4);
}

void led2_toggle(void)
{
	PORTB ^= _BV(LED2);
 3fe:	85 b1       	in	r24, 0x05	; 5
 400:	80 58       	subi	r24, 0x80	; 128
 402:	85 b9       	out	0x05, r24	; 5
 404:	08 95       	ret

00000406 <timer0_init>:
/* 系统频率1Mhz */

/* timer0--8位 */
void timer0_init(void)
{
	cli();												//关闭全局中断
 406:	f8 94       	cli
	TIMSK0 |= _BV(TOIE0);								//开溢出中断
 408:	ee e6       	ldi	r30, 0x6E	; 110
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	81 60       	ori	r24, 0x01	; 1
 410:	80 83       	st	Z, r24
	TCCR0B |= ( _BV(CS02) | _BV(CS00) );				//1024分频 约1ms
 412:	85 b5       	in	r24, 0x25	; 37
 414:	85 60       	ori	r24, 0x05	; 5
 416:	85 bd       	out	0x25, r24	; 37
//	TCCR0A |= ( _BV(WGM02) | _BV(WGM01) | _BV(WGM00) );	//定时器普通模式
	TCNT0 = 6;											//初值6，250ms
 418:	86 e0       	ldi	r24, 0x06	; 6
 41a:	86 bd       	out	0x26, r24	; 38
	sei();												//打开全局中断
 41c:	78 94       	sei
 41e:	08 95       	ret

00000420 <pwm1_init>:
}

/* timer1--16位 */
void pwm1_init(void)
{
	cli();								//关闭全局中断
 420:	f8 94       	cli
	TCCR1B |= _BV(CS10);				//不分频  1M/2/500
 422:	e1 e8       	ldi	r30, 0x81	; 129
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	81 60       	ori	r24, 0x01	; 1
 42a:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM11) | (1<<COM1A1);	//相位修正PWM
 42c:	a0 e8       	ldi	r26, 0x80	; 128
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	8c 91       	ld	r24, X
 432:	82 68       	ori	r24, 0x82	; 130
 434:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM13);
 436:	80 81       	ld	r24, Z
 438:	80 61       	ori	r24, 0x10	; 16
 43a:	80 83       	st	Z, r24
	TIMSK1 |= _BV(OCIE1A);				//A中断
 43c:	ef e6       	ldi	r30, 0x6F	; 111
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	82 60       	ori	r24, 0x02	; 2
 444:	80 83       	st	Z, r24
	/* 0-500升序时达到125清零，在500-0降序时达到125置位 */
	OCR1A  = 125;						//比较寄存器数值
 446:	8d e7       	ldi	r24, 0x7D	; 125
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	90 93 89 00 	sts	0x0089, r25
 44e:	80 93 88 00 	sts	0x0088, r24
	ICR1   = 500;						
 452:	84 ef       	ldi	r24, 0xF4	; 244
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	90 93 87 00 	sts	0x0087, r25
 45a:	80 93 86 00 	sts	0x0086, r24
	sei();								//打开全局中断
 45e:	78 94       	sei
 460:	08 95       	ret

00000462 <__fixunssfsi>:
 462:	70 d0       	rcall	.+224    	; 0x544 <__fp_splitA>
 464:	88 f0       	brcs	.+34     	; 0x488 <__fixunssfsi+0x26>
 466:	9f 57       	subi	r25, 0x7F	; 127
 468:	90 f0       	brcs	.+36     	; 0x48e <__fixunssfsi+0x2c>
 46a:	b9 2f       	mov	r27, r25
 46c:	99 27       	eor	r25, r25
 46e:	b7 51       	subi	r27, 0x17	; 23
 470:	a0 f0       	brcs	.+40     	; 0x49a <__fixunssfsi+0x38>
 472:	d1 f0       	breq	.+52     	; 0x4a8 <__fixunssfsi+0x46>
 474:	66 0f       	add	r22, r22
 476:	77 1f       	adc	r23, r23
 478:	88 1f       	adc	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	1a f0       	brmi	.+6      	; 0x484 <__fixunssfsi+0x22>
 47e:	ba 95       	dec	r27
 480:	c9 f7       	brne	.-14     	; 0x474 <__fixunssfsi+0x12>
 482:	12 c0       	rjmp	.+36     	; 0x4a8 <__fixunssfsi+0x46>
 484:	b1 30       	cpi	r27, 0x01	; 1
 486:	81 f0       	breq	.+32     	; 0x4a8 <__fixunssfsi+0x46>
 488:	77 d0       	rcall	.+238    	; 0x578 <__fp_zero>
 48a:	b1 e0       	ldi	r27, 0x01	; 1
 48c:	08 95       	ret
 48e:	74 c0       	rjmp	.+232    	; 0x578 <__fp_zero>
 490:	67 2f       	mov	r22, r23
 492:	78 2f       	mov	r23, r24
 494:	88 27       	eor	r24, r24
 496:	b8 5f       	subi	r27, 0xF8	; 248
 498:	39 f0       	breq	.+14     	; 0x4a8 <__fixunssfsi+0x46>
 49a:	b9 3f       	cpi	r27, 0xF9	; 249
 49c:	cc f3       	brlt	.-14     	; 0x490 <__fixunssfsi+0x2e>
 49e:	86 95       	lsr	r24
 4a0:	77 95       	ror	r23
 4a2:	67 95       	ror	r22
 4a4:	b3 95       	inc	r27
 4a6:	d9 f7       	brne	.-10     	; 0x49e <__fixunssfsi+0x3c>
 4a8:	3e f4       	brtc	.+14     	; 0x4b8 <__fixunssfsi+0x56>
 4aa:	90 95       	com	r25
 4ac:	80 95       	com	r24
 4ae:	70 95       	com	r23
 4b0:	61 95       	neg	r22
 4b2:	7f 4f       	sbci	r23, 0xFF	; 255
 4b4:	8f 4f       	sbci	r24, 0xFF	; 255
 4b6:	9f 4f       	sbci	r25, 0xFF	; 255
 4b8:	08 95       	ret

000004ba <__floatunsisf>:
 4ba:	e8 94       	clt
 4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <__floatsisf+0x12>

000004be <__floatsisf>:
 4be:	97 fb       	bst	r25, 7
 4c0:	3e f4       	brtc	.+14     	; 0x4d0 <__floatsisf+0x12>
 4c2:	90 95       	com	r25
 4c4:	80 95       	com	r24
 4c6:	70 95       	com	r23
 4c8:	61 95       	neg	r22
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	8f 4f       	sbci	r24, 0xFF	; 255
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	99 23       	and	r25, r25
 4d2:	a9 f0       	breq	.+42     	; 0x4fe <__floatsisf+0x40>
 4d4:	f9 2f       	mov	r31, r25
 4d6:	96 e9       	ldi	r25, 0x96	; 150
 4d8:	bb 27       	eor	r27, r27
 4da:	93 95       	inc	r25
 4dc:	f6 95       	lsr	r31
 4de:	87 95       	ror	r24
 4e0:	77 95       	ror	r23
 4e2:	67 95       	ror	r22
 4e4:	b7 95       	ror	r27
 4e6:	f1 11       	cpse	r31, r1
 4e8:	f8 cf       	rjmp	.-16     	; 0x4da <__floatsisf+0x1c>
 4ea:	fa f4       	brpl	.+62     	; 0x52a <__stack+0x2b>
 4ec:	bb 0f       	add	r27, r27
 4ee:	11 f4       	brne	.+4      	; 0x4f4 <__floatsisf+0x36>
 4f0:	60 ff       	sbrs	r22, 0
 4f2:	1b c0       	rjmp	.+54     	; 0x52a <__stack+0x2b>
 4f4:	6f 5f       	subi	r22, 0xFF	; 255
 4f6:	7f 4f       	sbci	r23, 0xFF	; 255
 4f8:	8f 4f       	sbci	r24, 0xFF	; 255
 4fa:	9f 4f       	sbci	r25, 0xFF	; 255
 4fc:	16 c0       	rjmp	.+44     	; 0x52a <__stack+0x2b>
 4fe:	88 23       	and	r24, r24
 500:	11 f0       	breq	.+4      	; 0x506 <__stack+0x7>
 502:	96 e9       	ldi	r25, 0x96	; 150
 504:	11 c0       	rjmp	.+34     	; 0x528 <__stack+0x29>
 506:	77 23       	and	r23, r23
 508:	21 f0       	breq	.+8      	; 0x512 <__stack+0x13>
 50a:	9e e8       	ldi	r25, 0x8E	; 142
 50c:	87 2f       	mov	r24, r23
 50e:	76 2f       	mov	r23, r22
 510:	05 c0       	rjmp	.+10     	; 0x51c <__stack+0x1d>
 512:	66 23       	and	r22, r22
 514:	71 f0       	breq	.+28     	; 0x532 <__stack+0x33>
 516:	96 e8       	ldi	r25, 0x86	; 134
 518:	86 2f       	mov	r24, r22
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	2a f0       	brmi	.+10     	; 0x52a <__stack+0x2b>
 520:	9a 95       	dec	r25
 522:	66 0f       	add	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	88 1f       	adc	r24, r24
 528:	da f7       	brpl	.-10     	; 0x520 <__stack+0x21>
 52a:	88 0f       	add	r24, r24
 52c:	96 95       	lsr	r25
 52e:	87 95       	ror	r24
 530:	97 f9       	bld	r25, 7
 532:	08 95       	ret

00000534 <__fp_split3>:
 534:	57 fd       	sbrc	r21, 7
 536:	90 58       	subi	r25, 0x80	; 128
 538:	44 0f       	add	r20, r20
 53a:	55 1f       	adc	r21, r21
 53c:	59 f0       	breq	.+22     	; 0x554 <__fp_splitA+0x10>
 53e:	5f 3f       	cpi	r21, 0xFF	; 255
 540:	71 f0       	breq	.+28     	; 0x55e <__fp_splitA+0x1a>
 542:	47 95       	ror	r20

00000544 <__fp_splitA>:
 544:	88 0f       	add	r24, r24
 546:	97 fb       	bst	r25, 7
 548:	99 1f       	adc	r25, r25
 54a:	61 f0       	breq	.+24     	; 0x564 <__fp_splitA+0x20>
 54c:	9f 3f       	cpi	r25, 0xFF	; 255
 54e:	79 f0       	breq	.+30     	; 0x56e <__fp_splitA+0x2a>
 550:	87 95       	ror	r24
 552:	08 95       	ret
 554:	12 16       	cp	r1, r18
 556:	13 06       	cpc	r1, r19
 558:	14 06       	cpc	r1, r20
 55a:	55 1f       	adc	r21, r21
 55c:	f2 cf       	rjmp	.-28     	; 0x542 <__fp_split3+0xe>
 55e:	46 95       	lsr	r20
 560:	f1 df       	rcall	.-30     	; 0x544 <__fp_splitA>
 562:	08 c0       	rjmp	.+16     	; 0x574 <__fp_splitA+0x30>
 564:	16 16       	cp	r1, r22
 566:	17 06       	cpc	r1, r23
 568:	18 06       	cpc	r1, r24
 56a:	99 1f       	adc	r25, r25
 56c:	f1 cf       	rjmp	.-30     	; 0x550 <__fp_splitA+0xc>
 56e:	86 95       	lsr	r24
 570:	71 05       	cpc	r23, r1
 572:	61 05       	cpc	r22, r1
 574:	08 94       	sec
 576:	08 95       	ret

00000578 <__fp_zero>:
 578:	e8 94       	clt

0000057a <__fp_szero>:
 57a:	bb 27       	eor	r27, r27
 57c:	66 27       	eor	r22, r22
 57e:	77 27       	eor	r23, r23
 580:	cb 01       	movw	r24, r22
 582:	97 f9       	bld	r25, 7
 584:	08 95       	ret

00000586 <__mulsf3>:
 586:	0b d0       	rcall	.+22     	; 0x59e <__mulsf3x>
 588:	78 c0       	rjmp	.+240    	; 0x67a <__fp_round>
 58a:	69 d0       	rcall	.+210    	; 0x65e <__fp_pscA>
 58c:	28 f0       	brcs	.+10     	; 0x598 <__mulsf3+0x12>
 58e:	6e d0       	rcall	.+220    	; 0x66c <__fp_pscB>
 590:	18 f0       	brcs	.+6      	; 0x598 <__mulsf3+0x12>
 592:	95 23       	and	r25, r21
 594:	09 f0       	breq	.+2      	; 0x598 <__mulsf3+0x12>
 596:	5a c0       	rjmp	.+180    	; 0x64c <__fp_inf>
 598:	5f c0       	rjmp	.+190    	; 0x658 <__fp_nan>
 59a:	11 24       	eor	r1, r1
 59c:	ee cf       	rjmp	.-36     	; 0x57a <__fp_szero>

0000059e <__mulsf3x>:
 59e:	ca df       	rcall	.-108    	; 0x534 <__fp_split3>
 5a0:	a0 f3       	brcs	.-24     	; 0x58a <__mulsf3+0x4>

000005a2 <__mulsf3_pse>:
 5a2:	95 9f       	mul	r25, r21
 5a4:	d1 f3       	breq	.-12     	; 0x59a <__mulsf3+0x14>
 5a6:	95 0f       	add	r25, r21
 5a8:	50 e0       	ldi	r21, 0x00	; 0
 5aa:	55 1f       	adc	r21, r21
 5ac:	62 9f       	mul	r22, r18
 5ae:	f0 01       	movw	r30, r0
 5b0:	72 9f       	mul	r23, r18
 5b2:	bb 27       	eor	r27, r27
 5b4:	f0 0d       	add	r31, r0
 5b6:	b1 1d       	adc	r27, r1
 5b8:	63 9f       	mul	r22, r19
 5ba:	aa 27       	eor	r26, r26
 5bc:	f0 0d       	add	r31, r0
 5be:	b1 1d       	adc	r27, r1
 5c0:	aa 1f       	adc	r26, r26
 5c2:	64 9f       	mul	r22, r20
 5c4:	66 27       	eor	r22, r22
 5c6:	b0 0d       	add	r27, r0
 5c8:	a1 1d       	adc	r26, r1
 5ca:	66 1f       	adc	r22, r22
 5cc:	82 9f       	mul	r24, r18
 5ce:	22 27       	eor	r18, r18
 5d0:	b0 0d       	add	r27, r0
 5d2:	a1 1d       	adc	r26, r1
 5d4:	62 1f       	adc	r22, r18
 5d6:	73 9f       	mul	r23, r19
 5d8:	b0 0d       	add	r27, r0
 5da:	a1 1d       	adc	r26, r1
 5dc:	62 1f       	adc	r22, r18
 5de:	83 9f       	mul	r24, r19
 5e0:	a0 0d       	add	r26, r0
 5e2:	61 1d       	adc	r22, r1
 5e4:	22 1f       	adc	r18, r18
 5e6:	74 9f       	mul	r23, r20
 5e8:	33 27       	eor	r19, r19
 5ea:	a0 0d       	add	r26, r0
 5ec:	61 1d       	adc	r22, r1
 5ee:	23 1f       	adc	r18, r19
 5f0:	84 9f       	mul	r24, r20
 5f2:	60 0d       	add	r22, r0
 5f4:	21 1d       	adc	r18, r1
 5f6:	82 2f       	mov	r24, r18
 5f8:	76 2f       	mov	r23, r22
 5fa:	6a 2f       	mov	r22, r26
 5fc:	11 24       	eor	r1, r1
 5fe:	9f 57       	subi	r25, 0x7F	; 127
 600:	50 40       	sbci	r21, 0x00	; 0
 602:	8a f0       	brmi	.+34     	; 0x626 <__mulsf3_pse+0x84>
 604:	e1 f0       	breq	.+56     	; 0x63e <__mulsf3_pse+0x9c>
 606:	88 23       	and	r24, r24
 608:	4a f0       	brmi	.+18     	; 0x61c <__mulsf3_pse+0x7a>
 60a:	ee 0f       	add	r30, r30
 60c:	ff 1f       	adc	r31, r31
 60e:	bb 1f       	adc	r27, r27
 610:	66 1f       	adc	r22, r22
 612:	77 1f       	adc	r23, r23
 614:	88 1f       	adc	r24, r24
 616:	91 50       	subi	r25, 0x01	; 1
 618:	50 40       	sbci	r21, 0x00	; 0
 61a:	a9 f7       	brne	.-22     	; 0x606 <__mulsf3_pse+0x64>
 61c:	9e 3f       	cpi	r25, 0xFE	; 254
 61e:	51 05       	cpc	r21, r1
 620:	70 f0       	brcs	.+28     	; 0x63e <__mulsf3_pse+0x9c>
 622:	14 c0       	rjmp	.+40     	; 0x64c <__fp_inf>
 624:	aa cf       	rjmp	.-172    	; 0x57a <__fp_szero>
 626:	5f 3f       	cpi	r21, 0xFF	; 255
 628:	ec f3       	brlt	.-6      	; 0x624 <__mulsf3_pse+0x82>
 62a:	98 3e       	cpi	r25, 0xE8	; 232
 62c:	dc f3       	brlt	.-10     	; 0x624 <__mulsf3_pse+0x82>
 62e:	86 95       	lsr	r24
 630:	77 95       	ror	r23
 632:	67 95       	ror	r22
 634:	b7 95       	ror	r27
 636:	f7 95       	ror	r31
 638:	e7 95       	ror	r30
 63a:	9f 5f       	subi	r25, 0xFF	; 255
 63c:	c1 f7       	brne	.-16     	; 0x62e <__mulsf3_pse+0x8c>
 63e:	fe 2b       	or	r31, r30
 640:	88 0f       	add	r24, r24
 642:	91 1d       	adc	r25, r1
 644:	96 95       	lsr	r25
 646:	87 95       	ror	r24
 648:	97 f9       	bld	r25, 7
 64a:	08 95       	ret

0000064c <__fp_inf>:
 64c:	97 f9       	bld	r25, 7
 64e:	9f 67       	ori	r25, 0x7F	; 127
 650:	80 e8       	ldi	r24, 0x80	; 128
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	08 95       	ret

00000658 <__fp_nan>:
 658:	9f ef       	ldi	r25, 0xFF	; 255
 65a:	80 ec       	ldi	r24, 0xC0	; 192
 65c:	08 95       	ret

0000065e <__fp_pscA>:
 65e:	00 24       	eor	r0, r0
 660:	0a 94       	dec	r0
 662:	16 16       	cp	r1, r22
 664:	17 06       	cpc	r1, r23
 666:	18 06       	cpc	r1, r24
 668:	09 06       	cpc	r0, r25
 66a:	08 95       	ret

0000066c <__fp_pscB>:
 66c:	00 24       	eor	r0, r0
 66e:	0a 94       	dec	r0
 670:	12 16       	cp	r1, r18
 672:	13 06       	cpc	r1, r19
 674:	14 06       	cpc	r1, r20
 676:	05 06       	cpc	r0, r21
 678:	08 95       	ret

0000067a <__fp_round>:
 67a:	09 2e       	mov	r0, r25
 67c:	03 94       	inc	r0
 67e:	00 0c       	add	r0, r0
 680:	11 f4       	brne	.+4      	; 0x686 <__fp_round+0xc>
 682:	88 23       	and	r24, r24
 684:	52 f0       	brmi	.+20     	; 0x69a <__fp_round+0x20>
 686:	bb 0f       	add	r27, r27
 688:	40 f4       	brcc	.+16     	; 0x69a <__fp_round+0x20>
 68a:	bf 2b       	or	r27, r31
 68c:	11 f4       	brne	.+4      	; 0x692 <__fp_round+0x18>
 68e:	60 ff       	sbrs	r22, 0
 690:	04 c0       	rjmp	.+8      	; 0x69a <__fp_round+0x20>
 692:	6f 5f       	subi	r22, 0xFF	; 255
 694:	7f 4f       	sbci	r23, 0xFF	; 255
 696:	8f 4f       	sbci	r24, 0xFF	; 255
 698:	9f 4f       	sbci	r25, 0xFF	; 255
 69a:	08 95       	ret

0000069c <__umulhisi3>:
 69c:	a2 9f       	mul	r26, r18
 69e:	b0 01       	movw	r22, r0
 6a0:	b3 9f       	mul	r27, r19
 6a2:	c0 01       	movw	r24, r0
 6a4:	a3 9f       	mul	r26, r19
 6a6:	01 d0       	rcall	.+2      	; 0x6aa <__umulhisi3+0xe>
 6a8:	b2 9f       	mul	r27, r18
 6aa:	70 0d       	add	r23, r0
 6ac:	81 1d       	adc	r24, r1
 6ae:	11 24       	eor	r1, r1
 6b0:	91 1d       	adc	r25, r1
 6b2:	08 95       	ret

000006b4 <_exit>:
 6b4:	f8 94       	cli

000006b6 <__stop_program>:
 6b6:	ff cf       	rjmp	.-2      	; 0x6b6 <__stop_program>

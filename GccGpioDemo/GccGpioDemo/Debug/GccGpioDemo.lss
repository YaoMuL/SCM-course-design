
GccGpioDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000060  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000239  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000014b  00000000  00000000  000003e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ee  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000009c  00000000  00000000  0000071c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001be  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000049  00000000  00000000  00000976  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000040  00000000  00000000  000009bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2f c0       	rjmp	.+94     	; 0x62 <__vector_1>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	3e c0       	rjmp	.+124    	; 0xc0 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:
#include "led.h"

int main(void)
{	
	/* led及按键初始化 */
	led_configuration();
  46:	1f d0       	rcall	.+62     	; 0x86 <led_configuration>
	/* 按键中断初始化 */
	keyint_init();
  48:	25 d0       	rcall	.+74     	; 0x94 <keyint_init>
	
    while(1)
    {
		led2_toggle();
  4a:	36 d0       	rcall	.+108    	; 0xb8 <led2_toggle>
		led4_toggle();
  4c:	30 d0       	rcall	.+96     	; 0xae <led4_toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4e:	2f e3       	ldi	r18, 0x3F	; 63
  50:	8d e0       	ldi	r24, 0x0D	; 13
  52:	93 e0       	ldi	r25, 0x03	; 3
  54:	21 50       	subi	r18, 0x01	; 1
  56:	80 40       	sbci	r24, 0x00	; 0
  58:	90 40       	sbci	r25, 0x00	; 0
  5a:	e1 f7       	brne	.-8      	; 0x54 <main+0xe>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <main+0x18>
  5e:	00 00       	nop
  60:	f4 cf       	rjmp	.-24     	; 0x4a <main+0x4>

00000062 <__vector_1>:
}


/*******外部中断0中断服务程序***********/
ISR(INT0_vect)
{	
  62:	1f 92       	push	r1
  64:	0f 92       	push	r0
  66:	0f b6       	in	r0, 0x3f	; 63
  68:	0f 92       	push	r0
  6a:	11 24       	eor	r1, r1
  6c:	8f 93       	push	r24
  6e:	9f 93       	push	r25
	PORTD^=_BV(LED3);
  70:	9b b1       	in	r25, 0x0b	; 11
  72:	80 e2       	ldi	r24, 0x20	; 32
  74:	89 27       	eor	r24, r25
  76:	8b b9       	out	0x0b, r24	; 11
  78:	9f 91       	pop	r25
  7a:	8f 91       	pop	r24
  7c:	0f 90       	pop	r0
  7e:	0f be       	out	0x3f, r0	; 63
  80:	0f 90       	pop	r0
  82:	1f 90       	pop	r1
  84:	18 95       	reti

00000086 <led_configuration>:
#include "led.h"

void led_configuration(void)
{
		DDRB  = (1<<PB6)|(1<<PB7);			  // 端口B方向,PB6和PB7为输出
  86:	80 ec       	ldi	r24, 0xC0	; 192
  88:	84 b9       	out	0x04, r24	; 4
		DDRD  = (PD2>>1)|(1<<PD5)|(1<<PD6);  // Key,PD2输入,PD5输出
  8a:	81 e6       	ldi	r24, 0x61	; 97
  8c:	8a b9       	out	0x0a, r24	; 10
		PORTD = (1<<PD5)|(1<<PD6);		  // 输出1
  8e:	80 e6       	ldi	r24, 0x60	; 96
  90:	8b b9       	out	0x0b, r24	; 11
  92:	08 95       	ret

00000094 <keyint_init>:
}

void keyint_init(void)
{
		cli();			//关闭全局中断
  94:	f8 94       	cli

		// INT0下降沿
		EICRA &= ~_BV(ISC00);	// 0 , 下降沿产生中断
  96:	e9 e6       	ldi	r30, 0x69	; 105
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	8e 7f       	andi	r24, 0xFE	; 254
  9e:	80 83       	st	Z, r24
		EICRA |= _BV(ISC01);	// 1
  a0:	80 81       	ld	r24, Z
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	80 83       	st	Z, r24
		EIMSK |= _BV(INT0);		// 使能
  a6:	e8 9a       	sbi	0x1d, 0	; 29
		EIFR  |= _BV(INTF0);	// 标志位
  a8:	e0 9a       	sbi	0x1c, 0	; 28
		
		sei();					//开启全局中断
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <led4_toggle>:
}
 
void led4_toggle(void)
{
	PORTB ^= _BV(LED4);
  ae:	95 b1       	in	r25, 0x05	; 5
  b0:	80 e4       	ldi	r24, 0x40	; 64
  b2:	89 27       	eor	r24, r25
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	08 95       	ret

000000b8 <led2_toggle>:
}
void led2_toggle(void)
{
	PORTB ^= _BV(LED2);
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	80 58       	subi	r24, 0x80	; 128
  bc:	85 b9       	out	0x05, r24	; 5
  be:	08 95       	ret

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>

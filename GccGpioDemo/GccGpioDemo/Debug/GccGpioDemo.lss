
GccGpioDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000171  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fe  00000000  00000000  000002ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000138  00000000  00000000  000003eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000048  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000177  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000049  00000000  00000000  000006e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	52 c0       	rjmp	.+164    	; 0xa8 <__vector_1>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 30       	cpi	r26, 0x00	; 0
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	3c c0       	rjmp	.+120    	; 0xcc <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:
unsigned int num=0;
#define		LED		PD5

int main(void)
{	
	DDRB=(1<<PB6)|(1<<PB7);				// 端口B方向,PB6和PB7为输出
  56:	80 ec       	ldi	r24, 0xC0	; 192
  58:	84 b9       	out	0x04, r24	; 4
	//DDRC=(1<<PC0)|(1<<PC4)|(1<<PC5);	// 输出 PC4-LED	
	DDRD=(PD2>>1)|(1<<PD5)|(1<<PD6);	// Key,PD2输入,PD5输出
  5a:	81 e6       	ldi	r24, 0x61	; 97
  5c:	8a b9       	out	0x0a, r24	; 10
	
	
	//DDRB = 0xFE;
	//PORTD=(1<<PD2);					// 上拉
	PORTD=(1<<PD5)|(1<<PD6);		// 输出1
  5e:	80 e6       	ldi	r24, 0x60	; 96
  60:	8b b9       	out	0x0b, r24	; 11
	
	cli();			//关闭全局中断
  62:	f8 94       	cli
	//EICRA&=~_BV(ISC01);	
	//EIMSK|=_BV(INT0);		// 外部中断0使能
	//EIFR|=_BV(INTF0);		// 清中断标志,写1
	
	// INT0下降沿
	EICRA&=~_BV(ISC00);		// 0 , 下降沿产生中断
  64:	e9 e6       	ldi	r30, 0x69	; 105
  66:	f0 e0       	ldi	r31, 0x00	; 0
  68:	80 81       	ld	r24, Z
  6a:	8e 7f       	andi	r24, 0xFE	; 254
  6c:	80 83       	st	Z, r24
	EICRA|=_BV(ISC01);		// 1
  6e:	80 81       	ld	r24, Z
  70:	82 60       	ori	r24, 0x02	; 2
  72:	80 83       	st	Z, r24
	EIMSK |=_BV(INT0);		// 使能
  74:	e8 9a       	sbi	0x1d, 0	; 29
	EIFR|=_BV(INTF0);		// 标志位
  76:	e0 9a       	sbi	0x1c, 0	; 28
	// 电平变化中断，实验ok，sim不行
	//PCICR|=_BV(PCIE2);		// 电平变化中断使能	
	//PCIFR|=_BV(PCIF2);		// 标志位清除
	//PCMSK2|=_BV(PCINT18);	//使能
	
	sei();			//开启全局中断
  78:	78 94       	sei
	
    while(1)
    {
        //TODO:: Please write your application code 
		PORTB|=_BV(PB6);		//	1s
  7a:	2e 9a       	sbi	0x05, 6	; 5
		PORTB&=~_BV(PB7);
  7c:	2f 98       	cbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	2f e3       	ldi	r18, 0x3F	; 63
  80:	8d e0       	ldi	r24, 0x0D	; 13
  82:	93 e0       	ldi	r25, 0x03	; 3
  84:	21 50       	subi	r18, 0x01	; 1
  86:	80 40       	sbci	r24, 0x00	; 0
  88:	90 40       	sbci	r25, 0x00	; 0
  8a:	e1 f7       	brne	.-8      	; 0x84 <main+0x2e>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <main+0x38>
  8e:	00 00       	nop
		_delay_us(1000000);		//		
		PORTB&=~_BV(PB6);		// 
  90:	2e 98       	cbi	0x05, 6	; 5
		PORTB|=_BV(PB7);
  92:	2f 9a       	sbi	0x05, 7	; 5
  94:	2f e3       	ldi	r18, 0x3F	; 63
  96:	8d e0       	ldi	r24, 0x0D	; 13
  98:	93 e0       	ldi	r25, 0x03	; 3
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x44>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x4e>
  a4:	00 00       	nop
  a6:	e9 cf       	rjmp	.-46     	; 0x7a <main+0x24>

000000a8 <__vector_1>:


/*******外部中断0中断服务程序***********/
ISR(INT0_vect)
//ISR(PCINT2_vect)
{	
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	//num++;
	//if(num>600) num=0;
	
	//PORTC^=_BV(PC4); 取反
	//PORTD^=(1<<LED);
	PORTD^=_BV(LED);
  b6:	9b b1       	in	r25, 0x0b	; 11
  b8:	80 e2       	ldi	r24, 0x20	; 32
  ba:	89 27       	eor	r24, r25
  bc:	8b b9       	out	0x0b, r24	; 11
	//PORTD&=~_BV(PD5);
	
	//PCIFR|=_BV(PCIF2);		// 标志位清除	
	//EIFR |=1;
	//PCIFR|=_BV(PCIF0);	// 置位，清中断标志(软件自动清)	
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
